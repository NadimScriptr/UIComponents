var _ = require("/modules/underscore/underscore.js")._;
/**
var aclEvaluator = require("../../lib/AclEvaluator");
var paramsEvaluator = require("../../lib/ParamsEvaluator");
var errorHandler = require("../../lib/ErrorHandler");

var errorHandler = new errorHandler.ErrorHandler();

var config = require("../../config").config;
**/
var log = require("log")
log.setLevel("INFO");
/**
//Check permissions
var userManagementGroups = config.userManagementGroups;

//Check if user has rights to access the userManagement Module
var aclEvaluator = new aclEvaluator.AclEvaluator();

//user needs to be in the userManagementGroups
var hasPermission = aclEvaluator.hasPermissions(request.user, userManagementGroups);
if(!hasPermission) {
  return errorHandler.buildError("no_permission", "You do not have enough permissions to manage devices.");
}

var requiredParams = ["id", "name"];
var optionalParams = ["apsdb.update", "description", "groups"];

//Check if required params
var paramsEvaluator = new paramsEvaluator.ParamsEvaluator();
hasAllRequiredParams = paramsEvaluator.hasRequiredParams(request.body, requiredParams)
if(!hasAllRequiredParams.success) {
  return errorHandler.buildError("missing_parameter", "Parameter \""+hasAllRequiredParams.param+ "\" is required.");
}

log.info(JSON.stringify(request.body))
var params = paramsEvaluator.buildParams(request.body, requiredParams, optionalParams);
**/


//TODO: putting the password hardcoded
//params["password"] = "demo"
var params = request.body;
log.info(params["content"])

var data = {};
var script_name = params["scriptName"];//"output/testTemplate_" + Math.floor((Math.random() * 100) + 1) + ".html";

data["apsdb.name"] = params["scriptName"];
if(params["update"]) {
  data["apsdb.update"] = params["update"]
} 

//This is needed as a workaround for the match regex
var a = "/*#*SCRIPTR_PLUGIN*#*";
var b = "*#*";
var c= "#*/";

data["apsdb.content"] = JSON.stringify({
    "ACL": {
            "execute":"anonymous",
            "read":"anonymous",
            "write":"nobody"
    },
    "userConfig": a + JSON.stringify({"metadata":{"name":"DashboardBuilder","plugindata": params["pluginData"]}}) + b + c,
    "contentType":"text/html",
    "content": params["content"]
});


var response = apsdb.callApi("SaveFile", data, null);

if(response.metadata.status == "failure") {
   return response.metadata;
} else {
  //Return saved scriptName
  response.result = params["scriptName"]
  return response.result;
}






