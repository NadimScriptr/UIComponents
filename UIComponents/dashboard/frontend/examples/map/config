NUMBER_HISTORICAL_DATA_POINTS = 200;
DEFAULT_LIMIT = 100;
UI_CHANNEL = "UI_channel";
TO_EMAIL = "telematics-demo@scriptr.io";
FROM_NAME = "Telematics Demo";
EMAIL_SUBJECT_TEMPLATE = 'Vehicle <%= vehicleId %> ';
EMAIL_BODY_TEMPLATE = '';
CEP_DESCRIPTION = "Cell tower triangulation error radius";
//email templates
var _templates = {
  	SPEED_LIMIT: {
      	subject: 'Vehicle <%= vehicleId %> Exceeded Speed Limit',
      	body: 'Please note that <%= vehicleId %> exceeded the speed limit and was doing <%= data.speed %>'
    },
  	ENGINE_OVERHEAT: {
      	subject: 'Vehicle <%= vehicleId %> Overheating',
      	body: 'Please note that <%= vehicleId %> is overheating. Recorded engine coolant temperature was <%= data.coolantTemperature %>'
    },
  	LOW_VOLTAGE: {
      	subject: 'Vehicle <%= vehicleId %> has a faulty battery',
      	body: 'Please note that <%= vehicleId %> has a faulty battery. Measured Voltage <%= data.voltage %>'
    },
  	GEN_DTC: {
      	subject: 'Vehicle <%= vehicleId %> has a generic dtc error',
      	body: 'Please note that <%= vehicleId %> has a logged DTC error <%= data.error %>'
    },
  	VEHICLE_EVENT: {
      	subject: 'Vehicle <%= vehicleId %> recorded abnormal event',
      	body: 'Please note that <%= vehicleId %> has a recroded the following abnormal event <%= data.event %>'
    }
}

function getTemplate(event){
	return _templates[event];
}

var _propertiesMapping = {
	fuel: {
    	key: "data_GEN_FUELLEVEL_value",
      	originalDataKey: "GEN_FUEL_LEVEL",
      	description: "data_GEN_FUELLEVEL_description", 
      	formatter: function(number){return parseFloat(number).toFixed(0)}
    },
  	rpm: {
  		key: "data_GEN_RPM_value",
  		description: "data_GEN_RPM_description",
      	originalDataKey: "GEN_RPM",
      	formatter: function(number){return parseFloat(number).toFixed(0)}
	},
    coolantTemperature: {
      	key: "data_GEN_ENGINE_COOLANT_TEMP_value",
        description: "data_GEN_ENGINE_COOLANT_TEMP_description",
      	originalDataKey: "GEN_ENGINE_COOLANT_TEMP",
      	formatter: function(number){return parseFloat(number).toFixed(0)}
    },
    fuelRate: {
    	key: "data_GEN_FUELRATE_value",
        description: "data_GEN_FUELRATE_description",
      	originalDataKey: "GEN_FUELRATE",
        formatter: function(number){return parseFloat(number).toFixed(1)}
    },
    address: {
      	key: "data_GEN_NEAREST_ADDRESS_value",
      	originalDataKey: "GEN_NEAREST_ADDRESS",
        description: "data_GEN_NEAREST_ADDRESS_description",
    },
    speed: {
      	key: "data_GEN_SPEED_value",
        description: "data_GEN_SPEED_description",
      	originalDataKey: "GEN_SPEED",
      	formatter: function(number){return parseFloat(number).toFixed(0)}
    },
    voltage: {
      	key: "data_GEN_VOLTAGE_value",
        description: "data_GEN_VOLTAGE_description",
      	originalDataKey: "GEN_VOLTAGE",
        formatter: function(number){return parseFloat(number).toFixed(2)}
    },
  	event: {
      	key: "data_GEN_VEHICLE_EVENT_value",
      	originalDataKey: "VEHICLE_EVENT"
    },
  	error: {
        key: "data_GEN_DTC_value",
      	originalDataKey: "GEN_DTC"
    },
    status: {
    	key: "data_ignitionStatus"
    },
  	mileage: {
      	key: "mileage"
    },
  	make: {
		key: "make"
    },
  	model: {
      	key: "model"
    },
  	snr: {
      	key: "snr",
      	description: "snr_description"
    },
  	rssi: {
      	key: "rssi",
      	description: "rssi_description"	
    },
  	cep: {
      	key: "cep",
      	description: "cep_description"
    },
  	source: {
      	key: "source"
    }
  
}

function getPropertyKeys(propertyName){
	return _propertiesMapping[propertyName];
}

function getDefaultProperties(source){
  	var properties = []
  	switch(source){
      case "stream":
        	properties = ["cep", "source"];
        	break;
      case "simulator":
        	properties = ["speed", "fuel", "fuelRate", "rpm", "coolantTemperature", "voltage", "status", "address", "mileage", "make", "model", "snr", "rssi"];
        	break;
      default:
        	properties = [];
    	}	
      return properties
}

function getSimulatorCollection(){
  	return "simulator-trip";
}

function getStreamCollection(){
	return "stream-trip";  
}


var KEENIO_PROJECTID = "57e520a08db53dfda8a70acd";
var KEENIO_CONFIG = {
  PROJECT_PREFIX:"project_",
  projects: {
    "project_57e520a08db53dfda8a70acd" : {    
      writeKey: "A4AE7C60F0957460CBA6D2724C86C356E39F11E5F281D3266990DD86674D312B3A3973BD4E8A8F4B118B0E9391644C9C351214DBFCD07121CB20B3FC86EB368FF140C8674E4859C5BB389B30ADDD49008640F37B24829E2178888495E3176650",  
      readKey: "525C62A020DE6AF23EA51BEE4ED616BE18EAE6773C4306DEFB6E6A464C8DDE852E999BA0371A4B0338C38927FA3BED13AE65DC90A218724AF24EB4CC24DE11AEECF8811B7B1BEA59A74052CEC683E012618086708861A130B43F07B6F9E74C6D"
    }
  }
}

