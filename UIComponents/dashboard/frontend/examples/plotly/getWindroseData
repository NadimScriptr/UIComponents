var log = require("log");
log.setLevel("INFO");

var windroseData = [
    {"direction": "E", "speeds": [Math.floor((Math.random() * 100) + 1), Math.floor((Math.random() * 100) + 1), Math.floor((Math.random() * 100) + 1), Math.floor((Math.random() * 100) + Math.floor((Math.random() * 100) + 1))]},
    {"direction": "ESE", "speeds": [Math.floor((Math.random() * 100) + 1), Math.floor((Math.random() * 100) + 1), 4]},
    {"direction": "SSE", "speeds": [Math.floor((Math.random() * 100) + 1), Math.floor((Math.random() * 100) + 1), 16]},
    {"direction": "S", "speeds": [Math.floor((Math.random() * 100) + 1), Math.floor((Math.random() * 100) + 1), 2, 1, 9, 11]},
    {"direction": "SSW", "speeds": [Math.floor((Math.random() * 100) + 1), Math.floor((Math.random() * 100) + 1), 7.5, 8]},
    {"direction": "WSW", "speeds": [Math.floor((Math.random() * 100) + 1), Math.floor((Math.random() * 100) + 1), 9]},
    {"direction": "W", "speeds": [Math.floor((Math.random() * 100) + 1), Math.floor((Math.random() * 100) + 1), Math.floor((Math.random() * 100) + 1), 9, 15, 19, 11]},
    {"direction": "WNW", "speeds": [Math.floor((Math.random() * 100) + 1), 17, Math.floor((Math.random() * 100) + 1)]},
    {"direction": "NNW", "speeds": [Math.floor((Math.random() * 100) + 1), 7]},
    {"direction": "N", "speeds": [Math.floor((Math.random() * 100) + 1), 0, 5, 9, 7]},
    {"direction": "NNE", "speeds": [Math.floor((Math.random() * 100) + 1), Math.floor((Math.random() * 100) + 1), 6.5]},
    {"direction": "ENE", "speeds": [Math.floor((Math.random() * 100) + 1), 30, Math.floor((Math.random() * 100) + 1)]}
];


var requestParams = request.body;

var publishResponse = function(channel, data, request) {
   var message = {"result": data};
   if(request.body && request.body.id) {
     message["id"] = request.body.id;
   } else {
     //Add a default id to identify the message published over the socket
      message["id"] = "windrose";
   }
   publish(channel, message);
}

publishResponse("responseChannel", windroseData, request);

return windroseData;