var log = require("log");
log.setLevel("INFO");

var allData = [
    {"direction": "E", "speeds": [2, 3, 15, 17]},
    {"direction": "ESE", "speeds": [24, 8, 4]},
    {"direction": "SSE", "speeds": [2.5, 7, 16]},
    {"direction": "S", "speeds": [3, 8, 2, 1, 9, 11]},
    {"direction": "SSW", "speeds": [13, 3, 7.5, 8]},
    {"direction": "WSW", "speeds": [21, 14, 9]},
    {"direction": "W", "speeds": [7, 0, 8, 9, 15, 19, 11]},
    {"direction": "WNW", "speeds": [4, 17, 21]},
    {"direction": "NNW", "speeds": [14, 7]},
    {"direction": "N", "speeds": [20, 0, 5, 9, 7]},
    {"direction": "NNE", "speeds": [1, 0.5, 6.5]},
    {"direction": "ENE", "speeds": [3.5, 30, 15]},
     {"direction": "E", "speeds": [2, 3, 15, 17]},
    {"direction": "ESE", "speeds": [24, 8, 4]},
    {"direction": "SSE", "speeds": [2.5, 7, 16]},
    {"direction": "S", "speeds": [3, 8, 2, 1, 9, 11]},
    {"direction": "SSW", "speeds": [13, 3, 7.5, 8]},
    {"direction": "WSW", "speeds": [21, 14, 9]},
    {"direction": "W", "speeds": [7, 0, 8, 9, 15, 19, 11]},
    {"direction": "WNW", "speeds": [4, 17, 21]},
    {"direction": "NNW", "speeds": [14, 7]},
    {"direction": "N", "speeds": [20, 0, 5, 9, 7]},
    {"direction": "NNE", "speeds": [1, 0.5, 6.5]},
    {"direction": "ENE", "speeds": [3.5, 30, 15]}
];

var retrievedData =getRandom(allData,6);
var requestParams = request.body;

var publishResponse = function(channel, data, request) {
   var message = {"result": data};
   if(request.body && request.body.id) {
     message["id"] = request.body.id;
   } else {
     //Add a default id to identify the message published over the socket
      message["id"] = "windrose";
   }
   publish(channel, message);
}

publishResponse("responseChannel", {data:retrievedData}, request);

return {data:retrievedData};

function getRandom(arr, n) {
    var result = new Array(n),
        len = arr.length,
        taken = new Array(len);
    if (n > len)
        throw new RangeError("getRandom: more elements taken than available");
    while (n--) {
        var x = Math.floor(Math.random() * len);
        result[n] = arr[x in taken ? taken[x] : x];
        taken[x] = --len in taken ? taken[len] : len;
    }
    return result;
}