var log = require("log");
log.setLevel("INFO");

var requestParams = request.body;

var publishResponse = function(channel, data, request, id) {
   var message = {"result": data};
   if(request.body && request.body.id) {
     message["id"] = request.body.id;
   } else {
     if(!id) {
        id = "gauge"
     }
     //Add a default id to identify the message published over the socket
      message["id"] = id;
   }
   publish(channel, message);
}

// data for line, bar, and area charts
var data = [{ y: "2006", a: Math.floor((Math.random() * 100) + 1), b: Math.floor((Math.random() * 100) + 1) },
    { y: "2007", a: Math.floor((Math.random() * 100) + 1),  b: Math.floor((Math.random() * 100) + 1) },
    { y: "2008", a: Math.floor((Math.random() * 100) + 1),  b: Math.floor((Math.random() * 100) + 1) },
    { y: "2009", a: Math.floor((Math.random() * 100) + 1),  b: Math.floor((Math.random() * 100) + 1) },
    { y: "2010", a: Math.floor((Math.random() * 100) + 1),  b: Math.floor((Math.random() * 100) + 1) },
    { y: "2011", a: Math.floor((Math.random() * 100) + 1),  b: Math.floor((Math.random() * 100) + 1) },
    { y: "2012", a: Math.floor((Math.random() * 100) + 1), b: Math.floor((Math.random() * 100) + 1) }];


// data for line, bar, and area charts
var dataline = [{ y: (new Date().getTime()), a: Math.floor((Math.random() * 100) + 1), b: Math.floor((Math.random() * 100) + 1) },
    { y: (new Date().getTime()), a: Math.floor((Math.random() * 100) + 1),  b: Math.floor((Math.random() * 100) + 1) },
    { y: (new Date().getTime()), a: Math.floor((Math.random() * 100) + 1),  b: Math.floor((Math.random() * 100) + 1) },
    { y: (new Date().getTime()), a: Math.floor((Math.random() * 100) + 1),  b: Math.floor((Math.random() * 100) + 1) },
    { y: (new Date().getTime()), a: Math.floor((Math.random() * 100) + 1),  b: Math.floor((Math.random() * 100) + 1) },
    { y: (new Date().getTime()), a: Math.floor((Math.random() * 100) + 1),  b: Math.floor((Math.random() * 100) + 1) },
    { y: (new Date().getTime()), a: Math.floor((Math.random() * 100) + 1), b: Math.floor((Math.random() * 100) + 1) }];

// data for donut chart
var donutdata = [{label: "Cranes", value: Math.floor((Math.random() * 100) + 1) }, {label: "Drillers",value: Math.floor((Math.random() * 100) + 1) }, {label: "Blasters", value: Math.floor((Math.random() * 100) + 1) }];



var dygraphData  = [];
for (var i = 1; i <= 20; i++) {
    var m = "01", d = i;
    if (d > 31) { m = "02"; d -= 31; }
    if (m == "02" && d > 28) { m = "03"; d -= 28; }
    if (m == "03" && d > 31) { m = "04"; d -= 31; }
    if (d < 10) d = "0" + d;
    // two series, one with range 1-100, one with range 1-2M
    dygraphData.push([(new Date("2010/" + m + "/" + d)).getTime(),
                  i + Math.random(),
                  100 - (i + Math.floor((Math.random() * 100) + 1)),
                  10 * (1 + (i + Math.floor((Math.random() * 100) + 1)) * (100 - Math.floor((Math.random() * 100) + 1)) / (50 * 50)),
                  10 * (2 - (i + Math.floor((Math.random() * 100) + 1)) * (100 - Math.floor((Math.random() * 100) + 1)) / (50 * 50))]);
}
          


var windroseData = [
    {"direction": "E", "speeds": [Math.floor((Math.random() * 100) + 1), Math.floor((Math.random() * 100) + 1), Math.floor((Math.random() * 100) + 1), Math.floor((Math.random() * 100) + Math.floor((Math.random() * 100) + 1))]},
    {"direction": "ESE", "speeds": [Math.floor((Math.random() * 100) + 1), Math.floor((Math.random() * 100) + 1), 4]},
    {"direction": "SSE", "speeds": [Math.floor((Math.random() * 100) + 1), Math.floor((Math.random() * 100) + 1), 16]},
    {"direction": "S", "speeds": [Math.floor((Math.random() * 100) + 1), Math.floor((Math.random() * 100) + 1), 2, 1, 9, 11]},
    {"direction": "SSW", "speeds": [Math.floor((Math.random() * 100) + 1), Math.floor((Math.random() * 100) + 1), 7.5, 8]},
    {"direction": "WSW", "speeds": [Math.floor((Math.random() * 100) + 1), Math.floor((Math.random() * 100) + 1), 9]},
    {"direction": "W", "speeds": [Math.floor((Math.random() * 100) + 1), Math.floor((Math.random() * 100) + 1), Math.floor((Math.random() * 100) + 1), 9, 15, 19, 11]},
    {"direction": "WNW", "speeds": [Math.floor((Math.random() * 100) + 1), 17, Math.floor((Math.random() * 100) + 1)]},
    {"direction": "NNW", "speeds": [Math.floor((Math.random() * 100) + 1), 7]},
    {"direction": "N", "speeds": [Math.floor((Math.random() * 100) + 1), 0, 5, 9, 7]},
    {"direction": "NNE", "speeds": [Math.floor((Math.random() * 100) + 1), Math.floor((Math.random() * 100) + 1), 6.5]},
    {"direction": "ENE", "speeds": [Math.floor((Math.random() * 100) + 1), 30, Math.floor((Math.random() * 100) + 1)]}
];



var plusOrMinus = Math.random() < 0.5 ? -1 : 1;
var accelerometerData = {};

accelerometerData.x = Math.floor((Math.random() * 100) + 1) * plusOrMinus;;
accelerometerData.y = Math.floor((Math.random() * 100) + 1) * plusOrMinus;;
accelerometerData.z = Math.floor((Math.random() * 360));


var countData = {"value": Math.floor(Math.random() * 100)};

var alertData =  {"value": "Fridge has been open for almost "+ Math.floor(Math.random() * 100) +" minutes"};

publishResponse("responseChannel", {"chart": data, "chartline":dataline ,"donut": donutdata, "dygraphs": dygraphData, "gauge": Math.floor((Math.random() * 100) + 1) , "speedometer": Math.floor((Math.random() * 100) + 1) , "odometer": Math.floor((Math.random() * 100) + 1) , "thermometer": Math.floor((Math.random() * 100) + 1) , "alert": "Fuel oil dropped to: "+Math.floor((Math.random() * 100) + 1), "windrose": windroseData, "accelerometer":accelerometerData, "count":countData, "alert": alertData }, request, "all");


return {"chart": data, "chartline":dataline ,"donut": donutdata , "dygraphs": dygraphData, "gauge": Math.floor((Math.random() * 100) + 1) , "speedometer": Math.floor((Math.random() * 100) + 1) , "odometer": Math.floor((Math.random() * 100) + 1) , "thermometer": Math.floor((Math.random() * 100) + 1) , "alert": "Fuel oil dropped to: "+Math.floor((Math.random() * 100) + 1), "windrose": windroseData, "accelerometer":accelerometerData, "count": countData, "alert": alertData};
