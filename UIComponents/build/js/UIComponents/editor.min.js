var underscore = angular.module("underscore", []);
underscore.factory("_", ["$window", function($window) {		
  return $window._; // assumes underscore has already been loaded on the page		
}]);



angular.module("DashboardBuilder", [
	"underscore", 
	"btford.markdown", 
	"schemaForm", 
	"Accelerometer", 
	"IFrame", 
	"Button", 
	"Slider", 
	"ToggleSwitch", 
	"ACL", 
	"Grid", 
	"Map", 
	"Alert", 
	"xeditable", 
	"ui.bootstrap", 
	"ngRoute", 
	"slickCarousel", 
	"ngAnimate", 
	"ngSanitize", 
	"WsClient", 
	"HttpClient", 
	"DataService", 
	"Chart", 
	"gridster",
	"Gauge",
	"Speedometer", 
	"Odometer",
	"SearchBox", 
	"ngMaterial", 
	"ngMessages", 
	"material.svgAssetsCache", 
	"Thermometer", 
	"angularSpectrumColorpicker",
	"angular-underscore/filters", 
	"pascalprecht.translate", 
	"ui.select", 
	"ui.codemirror",  
	"Dygraphs", 
	"mgcrea.ngStrap", 
	"mgcrea.ngStrap.modal",
	"mgcrea.ngStrap.select", 
	"Display", 
	"Plotly"]);
angular.module('ACL', ['ui.bootstrap', 'List']);

angular
    .module('ACL')
    .component(
    'scriptrAcl',
    {
        bindings : {

            "users" : "<?",
            
            "defaultSetObject" : "<?",
            
            "onSave" : "&"

        },
        templateUrl: '/UIComponents/dashboard/frontend/components/ACL/ACL.html',
        controller: ['$uibModal', function($uibModal) {
            
            var self = this;
            
            this.$onInit = function(){
                console.log("$onInit initialized");
                self.accessType = (self.users.length == 1 && self.users[0].code == "anonymous") ? "Anonymous access" : "Restricted access";
            } 
            
            this.$postLink = function(){
                console.log("$postLink initialized");
            }

            this.openModal = function(){
                var modalInstance = $uibModal.open({
                    animation: true,
                    size: 'lg',
                    component: 'aclPopup',
                    resolve: {
                        widget: function () {
                            return {
                                "parent" : self,
                                "users":  self.users,
                                "defaultSetObject":  self.defaultSetObject,
                                "onSave": self.onSave
                        }
                      }
                   }
                });
                modalInstance.result.then(function (selectedItem) {
                    console.log("selectedItem: " +selectedItem);
                }, function () {
                });
            }
        }]
    });


angular
  .module('ACL')
  .component('aclPopup', 
  {
    bindings: {
      resolve: '<',
      users: '<?',
      defaultSetObject : "<?",  
      close: '&',
      dismiss: '&'
    },
    templateUrl: '/UIComponents/dashboard/frontend/components/ACL/myModalContent.html',
    controller: ['$scope', '$sce', function ($scope, $sce) {
        
      var self = this;
      self.listScope;  
        
      this.$onInit = function(){
         self.users = self.resolve.widget.users;
         self.defaultSetObject = self.resolve.widget.defaultSetObject;
         self.popoverContent = $sce.trustAsHtml('<span style=\'color: #323232;\'><strong>Scriptr.io provides the following predefined groups:</strong><div class=\'mt10 mb5\'><i class=\'fa fa-caret-right text-primary\'></i> authenticated represents anyone with a valid token.</div><div class=\'mb5\'><i class=\'fa fa-caret-right text-primary\'></i> anonymous represents everyone.</div><div class=\'mb5\'><i class=\'fa fa-caret-right text-primary\'></i> nobody represents no one.</div></span>');
      }   
        
      this.onSelect = function(user){
          self.resolve["modalScope"] = this;
          if(user.originalObject[this.titleField] == "anonymous"){
             this.disableInput = true; 
             this.hideObjects = true;
             self.showMsg = true;
          }
      }
      
      this.removeAnonymousAccess = function(){
           self.showMsg = false;
           self.resolve["modalScope"].disableInput = false; 
           self.resolve["modalScope"].hideObjects = false; 
           var anonymous = [{
            code : "anonymous",
            icon : "fa fa-group"    
           }];
           $scope.$broadcast('angucomplete-alt:addObjectToList', self.id, anonymous);
      }
      
      this.addAnonymousAccess = function(){
           self.showMsg = false;
           self.resolve["modalScope"].disableInput = false; 
           self.resolve["modalScope"].hideObjects = false;
           
           var objs = [];
           for(var i = 0; i < self.resolve["modalScope"].objects.length; i++){
               if(self.resolve["modalScope"].objects[i].code != "anonymous"){
                   objs.push(self.resolve["modalScope"].objects[i]);
               }
           }
           $scope.$broadcast('angucomplete-alt:addObjectToList', self.id, objs);
      }
      
      this.closeAlert = function() {
         this.show = false;
      };
      
      this.showAlert = function(type, content) {
         this.closeAlert();
         this.message = {
           "type": type,
           "content": content
         }
         this.show = true
      }
      
      this.updateFileACL = function(){
          
          if(!self.listScope){
             self.listScope = $scope.$broadcast('angucomplete-alt:getSetObjects', self.id); 
          }
          var listCtrl = self.listScope.targetScope.$$childTail.$ctrl;
          if(typeof self.resolve.widget.onSave() == "function"){
              var acls = [];
              if(typeof listCtrl.objects == 'undefined') listCtrl.objects = self.resolve["modalScope"].objects;
              if(listCtrl.objects.length > 0){
                  var objs = listCtrl.objects;
              }else{
                  var objs = self.resolve.widget.defaultSetObject;
              }
              for(var i = 0; i < objs.length; i++){
                  acls.push(objs[i].code);
              }
              listCtrl.showList = false;
              self.resolve.widget.onSave()(acls).then(
                 function(data, response) {
                     listCtrl.showList = true;
                     self.showAlert("success", "The Access Control List is saved successfully.");
                     self.resolve.widget.parent.users = listCtrl.objects;
                     self.resolve.widget.parent.accessType = (listCtrl.objects.length == 1 && listCtrl.objects[0].code == "anonymous") ? "Anonymous access" : "Restricted access";
                     console.log("success");
              },
              function(err) {
                  listCtrl.showList = true;  
                  self.showMsg("danger", err.data.response.metadata.errorDetail);
                console.log("reject", err);
              });
          }
          
      }
        
      this.onCancel = function (myForm) {
        this.dismiss({$value: 'cancel'});
        console.log("Dissmisseddd");
      };

    }]
});

angular
    .module('DashboardBuilder')
    .constant(
    "common",
    {
        "docTab": {
            title: "Documentation",
            items: [
                {
                    "type": "template",
                    "template": "<div><strong>Note:</strong> if you want to use these properities in the onFormatData Function , please note you need to use the camel case instead of the hyphen case <br/><strong>Example:</strong> if the attribute is <i>item-type</i> , use it as <i>self.itemType</i>  </div>",
                },
                {
                    "key": "docValue",
                    "type": "template",
                    "template": "<div class=\"markdown-db\"> <div btf-markdown=\"form.url\"> </div> </div>",
                    "url":"",
                    "testVal":"test"
                }
            ]
        },
        "formTab": {
            title: "Data",
            items: [
                {
                    "type": "section",
                    "htmlClass": "row",
                    "condition": "!model['deactivateExternalDataHandler'] || model['deactivateExternalDataHandler'] == false",
                    "items": [{
                        "type": "section",
                        "htmlClass": "col-xs-7",
                        "items": [{
                            "key": "dashboard-data-handler"
                        }]
                    },
                              {
                                  "type": "section",
                                  "htmlClass": "col-xs-5",
                                  "condition": "model['dashboard-data-handler'] === true", //Condition on section and not on key because of a bug in the destroy in schemaForm, needs to be here to remove fields from model
                                  "items": [{
                                      "key": "service-tag"
                                  }]
                              }
                             ]
                },
                {
                    "type": "section",
                    "htmlClass": "row",
                    "items": [{
                        "type": "section",
                        "htmlClass": "col-xs-6",
                        "condition": "model['dashboard-data-handler'] === false",
                        "items": [{
                            "key": "transport",
                            "placeholder": " ",
                            "type": 'strapselect',
                            "titleMap": [{
                                "value": "wss",
                                "name": "wss"
                            }, {
                                "value": "https",
                                "name": "https"
                            }]
                        }]
                    }, {
                        "type": "section",
                        "htmlClass": "col-xs-6",
                        "condition": "model.transport == 'wss'",
                        "items": [
                            {
                                "key": "msg-tag",
                            }
                        ]
                    },
                              {
                                  "type": "section",
                                  "htmlClass": "col-xs-6",
                                  "condition": "model.transport == 'https'",
                                  "items": [
                                      {
                                          "key": "http-method",
                                          "type": 'strapselect',
                                          "placeholder": " ",
                                          "destroyStrategy": "remove",
                                          "titleMap": [{
                                              "value": "GET",
                                              "name": "GET"
                                          }]
                                      }, {
                                          "key": "fetch-data-interval",
                                          "destroyStrategy": "remove"
                                      }
                                  ]
                              }      
                             ]
                },
                {
                    "type": "section",
                    "htmlClass": "row",
                    "condition": "model['dashboard-data-handler'] === false && (model.transport == 'wss' || model.transport == 'https')",
                    "items": [{
                        "type": "section",
                        "htmlClass": "col-xs-6",
                        "items": [
                            {
                                "key": "api"
                            }
                        ]
                    }, {
                        "type": "section",
                        "htmlClass": "col-xs-6",
                        "items": [
                            {
                                "key": "api-params"
                            }, {
                                "key": "use-window-params"
                            }]
                    }]
                },
                {
                    "type": "section",
                    "htmlClass": "row",
                    "items": [{
                        "type": "section",
                        "htmlClass": "col-xs-12 codemirror-small",
                        "condition": "model['dashboard-data-handler'] === false && model['transport'] != 'wss' && model['transport'] != 'https' && model['dropdata'] !== true ",
                        "items": [
                            {
                                "key": "data",
                                "type": "codemirror",
                                "codemirrorOptions": {
                                    "styleActiveLine": true,
                                    "lineNumbers": true,
                                    "lineWrapping": true,
                                    "autoCloseBrackets": true,
                                    "matchBrackets": true,
                                    "theme": "neo",
                                    "mode": {name: "javascript", json: true},
                                    "readOnly": false,
                                    "autoRefresh": true
                                }
                            }
                        ]
                    }
                             ]
                },
                {
                    "type": "section",
                    "htmlClass": "row",
                    "items": [{
                        "type": "section",
                        "htmlClass": "col-xs-12 codemirror-small",
                        "items": [
                            {
                                "key": "on-format-data",
                                "type": "codemirror",
                                "codemirrorOptions": {
                                    "value": "return;",
                                    "styleActiveLine": true,
                                    "lineNumbers": true,
                                    "lineWrapping": true,
                                    "autoCloseBrackets": true,
                                    "matchBrackets": true,
                                    "theme": "neo",
                                    "mode": "javascript",
                                    "readOnly": false,
                                    "autoRefresh": true
                                }
                            }
                        ]
                    }]
                },
                {
                    "type": "section",
                    "htmlClass": "row",
                    "items": [{
                        "type": "section",
                        "htmlClass": "col-xs-12",
                        "items": [{
                            "type": "help",
                            "helpvalue": "<hr>"
                        }]
                    }]
                },
                {
                    "type": "section",
                    "htmlClass": "row",
                    "items": [{
                        "type": "section",
                        "htmlClass": "col-xs-12",
                        "items": [{
                            "type": "help",
                            "helpvalue": "<div class=\"alert alert-info\"><ul><li>Messages published over the subscibe channel need to have the following format in order to be consumed by a widget:<ul><li>{“id”: “&lt;message tag value&gt;”, “result”: “&lt;static data structure&gt;”}</li></ul></li><li>A script would publish a message  over the subscribe channel as follow:<ul><li>publish(“responseChannel”, {“id”: “&lt;message tag value&gt;”, “result”: “&lt;static data structure&gt;”});</li></ul></li><li>Whether https or wss transport is used, Sciptr API should return the static data structure for widget initial load:<ul><li>return &lt;static data structure&gt;;</li></ul></li></ul></div>"
                        }]
                    }]
                }
            ]
        },
        "schemaFields": {
            "dashboard-data-handler": {
                "title": "The dashboard will handle data sourcing for widget",
                "type": "boolean",
                "default": false,
                "description": "Dashboard will use the properties in its settings tab to fetch data and will relay it to the widget."
            },
            "service-tag": {
                "title": "Data tag",
                "type": "string",
                "description": "The dashboard data source will fetch data for multiple widgets. Set a data tag for the dashboard to propagate to your widget the data object with the data tag as its key. If not set all the data fetched by the dashboard will be relayed to the widget"
            },
            "api": {
                "title": "Api",
                "type": "string",
                "description": "Name of the scriptr api (script name) responsible for publishing or returning the widget data."
            },
            "api-params": {
                "title": "Api params",
                "type": "string",
                "description": "A JSON formatted object containing the parameters to be sent to the scriptr api.",
                "x-schema-form": {
                    "type": "textarea",
                    "placeholder": "Ex: {'id' : '599865'}"
                }
            },
            "http-method": {
                "title": "Http method",
                "type": "string",
                "description": "Method to be used when calling the scriptr api over https. Default: GET.",
                "default": "GET",
            },
            "transport": {
                "title": "Transport",
                "type": "string",
                "description": "Protocol used to call the  scriptr api. Use wss for real time communication whenever your widget needs to update its data live by consuming messages published from scriptr over the subscribe channel defined in settings."
            },
            "msg-tag": {
                "title": "Message tag",
                "type": "string",
                "description": "The dashboard widgets consume messages published over the subscribe channel defined in dashboard settings. Message tag is an identifier sent as part of the published message. The widget uses it to know which messages to consume or ignore."
            },
            "on-format-data": {
                "title": "Format data",
                "default": "return data;",
                "type": "string",
                "description": "Callback function to be called after data is returned from data source."
            }, "use-window-params": {
                "title": "Merge Window Params",
                "type": "boolean",
                "default": false,
                "description": "Merge URL query params with the widget api params."
            },
            "fetch-data-interval": {
                "title": "Fetch Interval",
                "type": "number",
                "description": "Data update interval value.",
                "minimum": 15
            },
            "docValue": {
                "title": "docValue",
                "type": "string",
                "description": "",
            },
            "isDashboard": {
                "title": "Is dashboard?",
                "type": "hidden",
                "default": false
            }
        }
    }
);

angular
    .module('DashboardBuilder')
    .constant(
        "commonAction",
        {
            "formTab": {
                title: "Action",
                items: [
                    {
                        "type": "section",
                        "htmlClass": "row",
                        "items": [{
                            "type": "section",
                            "htmlClass": "col-xs-6",
                            "items": [{
                                "key": "action-transport",
                                "placeholder": " ",
                                "type": 'strapselect',
                                "titleMap": [{
                                    "value": "wss",
                                    "name": "wss"
                                }, {
                                    "value": "https",
                                    "name": "https"
                                }]
                            }]
                        }, {
                            "type": "section",
                            "htmlClass": "col-xs-6",
                            "items": [{
                                "key": "action-http-method",
                                "type": 'strapselect',
                                "condition": "model['action-transport'] =='https'",
                                "placeholder": " ",
                                "titleMap": [{
                                    "value": "GET",
                                    "name": "GET"
                                }]
                            }]
                        }]
                    },
                    {
                        "type": "section",
                        "htmlClass": "row",
                        "items": [{
                            "type": "section",
                            "htmlClass": "col-xs-6",
                            "items": [
                                { 
                                    "key":"action-api"
                                }
                            ]
                        }, {
                            "type": "section",
                            "htmlClass": "col-xs-6",
                            "items": [
                                {
                                    "key": "action-api-params" 
                                }, {
                                    "key": "action-use-window-params" 
                                }]
                        }]
                    }
                ]
            },
            "schemaFields": {
                "action-api": {
                    "title": "Action api",
                    "type": "string",
                    "description": "Name of the scriptr api (script name) used for the widget action call."
                },
                "action-api-params": {
                    "title": "Api params",
                    "type": "string",
                    "description": "A JSON formatted object containing the parameters to be sent to the scriptr action api.",
                    "x-schema-form": {
                        "type": "textarea",
                        "placeholder": "Ex: {'id' : '599865'}"
                    }
                },
                "action-http-method": {
                    "title": "Http method",
                    "type": "string",
                    "description": "Method to be used when calling the scriptr action api over https. Default: GET.",
                    "default": "GET",
                },
                "action-transport": {
                    "title": "Transport",
                    "type": "string",
                    "description": "Protocol used to call the  scriptr action api. Use wss for real time communication whenever your widget needs to update its data live by consuming messages published from scriptr over the subscribe channel defined in settings."
                },
                "action-use-window-params": {
                    "title": "Merge Window Params",
                    "type": "boolean",
                    "default": false,
                    "description": "Merge URL query params with the widget api params."
                }
            }

        }
);
angular
    .module('DashboardBuilder')
    .constant(
        "boxStyle",
        {
            "formTab": {
                title: "Box Properties",
                items: [
                    { 	
                        "key": "boxHeader"
                       
                    },
                    {
                        "condition": "model.boxHeader === true",
                        "key": "boxLabel"
                    }
                ]
            },

            "schemaFields": {
                "boxLabel": {
                    "title": "Box Label",
                    "type": "string",
                    "description": "Define your widget box title.",
                    "maxLength": 40
                },
                "boxHeader": {
                    "title": "Has header title",
                    "type": "boolean",
                    "default": true,
                    "description": "Check to display a chart header title."
                }
            }


        }
    );

angular
    .module('DashboardBuilder')
    .constant(
        "widgetsConfig",
        (function () {
            return {
                "defaultWidget": {
                    "name": "displaybox"
                },
                "widgets": [
					__LINE_DYGRAPH__,
                    __BAR__,
                    __AREA__,
                    __LINE__,
                    __DONUT__,
                    __WINDROSE__,
                    __3DSURFACE__,
                    __GAUGE__,
                    __SPEEDOMETER__,
                    __THERMOMETER__,
                    __ODOMETER__,
                    __PROGRESSBAR__,
                    __ACCELEROMETER__,
                    __ALERT__,
                    __DISPLAY_DATA__,
                    __BUTTON__,
                    __TOGGLE_SWITCH__,
                    __SLIDER__,
                    __GRID__,
                    __MAP__,
                    __IFRAME__
                    //,__METRIC_BOX__
                ]
            }
        }
        )()
    ).constant(
        "widgetsDocs",{
            default:"/README.md",
            widgets:{
                "alert":"/UIComponents/dashboard/frontend/components/alert/properties.md",
            	"linedygraph":"/UIComponents/dashboard/frontend/components/dygraphs/properties.md",
                "d3surface":"/UIComponents/dashboard/frontend/components/plotly/3dsurface_properties.md",
                "accelerometer":"/UIComponents/dashboard/frontend/components/accelerometer/properties.md",
                "area":"/UIComponents/dashboard/frontend/components/chart/properties.md",
                "bar":"/UIComponents/dashboard/frontend/components/chart/properties.md",
                "button":"/UIComponents/dashboard/frontend/components/button/properties.md",
                "displayData":"/UIComponents/dashboard/frontend/components/displayCount/properties.md",
                "donut":"/UIComponents/dashboard/frontend/components/chart/properties.md",
                "gauge":"/UIComponents/dashboard/frontend/components/gauge/properties.md",
                "grid":"/UIComponents/dashboard/frontend/components/grid/properties.md",
                "iframe":"/UIComponents/dashboard/frontend/components/IFrame/properties.md",
                "line":"/UIComponents/dashboard/frontend/components/chart/properties.md",
                "map":"/UIComponents/dashboard/frontend/components/map/properties.md",
                "odometer":"/UIComponents/dashboard/frontend/components/odometer/properties.md",
                "slider":"/UIComponents/dashboard/frontend/components/slider/properties.md",
                "progressbar":"/UIComponents/dashboard/frontend/components/progressbar/properties.md",
                "speedometer":"/UIComponents/dashboard/frontend/components/speedometer/properties.md",
                "thermometer":"/UIComponents/dashboard/frontend/components/thermometer/properties.md",
                "toggleSwitch":"/UIComponents/dashboard/frontend/components/toggleSwitch/properties.md",
                "windrose":"/UIComponents/dashboard/frontend/components/plotly/windrose_properties.md",
            }
            
            
        })
;
const __defaultsThemeStyles__ = {
   "light": {
      "dashboard": {
         "background-type": "solid",
         "background-image": "",
         "background-position": "center",
         "background-repeat": "no-repeat",
         "background-color": "#FFF",
         "background-gradient": "linear-gradient(45deg, rgba(255,255,255,1) 49%, rgba(192,192,192,1) 100%, rgba(128,128,128,1) 100%);",
         "border": "false",
         "border-color": "#DDD",
         "border-style": "solid",
         "border-width": 1,
         "border-radius": 0,
         "box-shadow": "true",
         "box-shadow-color": "rgba(51, 51, 51, 0.3)"
      },
      "box": {
         "background-type": "solid",
         "background-color": "#FFF",
         "background-gradient": "linear-gradient(45deg, rgba(255,255,255,1) 49%, rgba(192,192,192,1) 100%, rgba(128,128,128,1) 100%);",
         "border": "false",
         "border-color": "#DDD",
         "border-style": "solid",
         "border-width": 1,
         "border-radius": 0,
         "box-shadow": "true",
         "box-shadow-color": "rgba(51, 51, 51, 0.3)"
      },
      "box-header": {
         "background-type": "solid",
         "background-color": "#FFF",
         "background-gradient": "linear-gradient(45deg, rgba(255,255,255,1) 49%, rgba(192,192,192,1) 100%, rgba(128,128,128,1) 100%);",
         "border": "false",
         "border-color": "#DDD",
         "border-style": "solid",
         "border-width": 1,
         "border-radius": 0
      },
      "box-content": {
         "background-type": "solid",
         "background-color": "#FFF",
         "background-gradient": "linear-gradient(45deg, rgba(255,255,255,1) 49%, rgba(192,192,192,1) 100%, rgba(128,128,128,1) 100%);",
         "border": "false",
         "border-color": "#DDD",
         "border-style": "solid",
         "border-width": 1,
         "border-radius": 0
      },
      "box-label": {
         "font-weight": "bold",
         "font-size": 17,
         "text-align": "center",
         "display": "block",
         "color": "#000"
      }
   },
   "dark": {
      "dashboard": {
         "background-type": "solid",
         "background-image": "",
         "background-position": "center",
         "background-repeat": "no-repeat",
         "background-color": "#CCC",
         "background-gradient": "linear-gradient(45deg, rgba(255,255,255,1) 49%, rgba(192,192,192,1) 100%, rgba(128,128,128,1) 100%);",
         "border": "false",
         "border-color": "#111",
         "border-style": "solid",
         "border-width": 1,
         "border-radius": 0,
         "box-shadow": "true",
         "box-shadow-color": "rgba(51, 51, 51, 0.3)"
      },
      "box": {
         "background-type": "solid",
         "background-color": "#CCC",
         "background-gradient": "linear-gradient(45deg, rgba(255,255,255,1) 49%, rgba(192,192,192,1) 100%, rgba(128,128,128,1) 100%);",
         "border": "false",
         "border-color": "#DDD",
         "border-style": "solid",
         "border-width": 1,
         "border-radius": 0,
         "box-shadow": "true",
         "box-shadow-color": "rgba(51, 51, 51, 0.3)"
      },
      "box-header": {
         "background-type": "solid",
         "background-color": "#CCC",
         "background-gradient": "linear-gradient(45deg, rgba(255,255,255,1) 49%, rgba(192,192,192,1) 100%, rgba(128,128,128,1) 100%);",
         "border": "false",
         "border-color": "#DDD",
         "border-style": "solid",
         "border-width": 1,
         "border-radius": 0
      },
      "box-content": {
         "background-type": "solid",
         "background-color": "#CCC",
         "background-gradient": "linear-gradient(45deg, rgba(255,255,255,1) 49%, rgba(192,192,192,1) 100%, rgba(128,128,128,1) 100%);",
         "border": "false",
         "border-color": "#DDD",
         "border-style": "solid",
         "border-width": 1,
         "border-radius": 0
      },
      "box-label": {
         "font-weight": "bold",
         "font-size": 17,
         "text-align": "center",
         "display": "block",
         "color": "#000"
      }
   }
}

		                                                   
angular
    .module('DashboardBuilder')
    .constant(
    "dashboardConfig",
    (function() {
        return {
            "script": {
                "form": [
                    {
                        "key": "scriptName",
                        "notitle": true,
                        "placeholder": "Script name"
                    }
                ],
                "schema": {
                    "type": "object",
                    "title": "Schema",
                    "properties": {
                        "scriptName": {
                            "type": "string",
                            "fieldHtmlClass": "script-name-input"
                        }
                    },
                    "required": [
                        "scriptName"
                    ]
                }
            },
            "settings": {
                "label": "Dashboard Configuration",
                "name": "dasboard",
                "defaults": {
                    "publishChannel": "requestChannel",
                    "subscribeChannel": "responseChannel",
                    "theme": "light",
                    "style": __defaultsThemeStyles__["light"],
                    "deactivateExternalDataHandler": true
                },
                "form": [
                    {
                        "type": "tabs",
                        "selectedTabIndex": 0,
                        "tabs": [
                            {
                                "title": "Channels",
                                "items": [
                                    {
                                        "type": "section",
                                        "htmlClass": "row",
                                        "items": [
                                            {
                                                "type": "help",
                                                "helpvalue": "<h5 class='pdr10 pdl10'>Set the communication channels used by the dashboard to send and receive data.<\/h5><hr/>"
                                            },
                                            {
                                                "type": "section",
                                                "htmlClass": "col-xs-12",
                                                "items": [
                                                    "publishChannel",
                                                    "subscribeChannel"
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "title": "Theme",
                                "items": [
                                    {
                                        "type": "section",
                                        "htmlClass": "row",
                                        "items": [
                                            {
                                                "type": "section",
                                                "htmlClass": "col-xs-12",
                                                "items": [
                                                    {
                                                        "type": "section",
                                                        "items": [
                                                            {
                                                                "key": "theme",
                                                                "htmlClass": "",
                                                                "type": "strapselect",
                                                                "placeholder": " ",
                                                                "titleMap": [
                                                                    {
                                                                        "value": "light",
                                                                        "name": "Light"
                                                                    },
                                                                    {
                                                                        "value": "dark",
                                                                        "name": "Dark"
                                                                    }
                                                                ]
                                                            },
                                                            {
                                                                "key": "reset",
                                                                "condition": "false",
                                                                "htmlClass": "col-xs-12 col-md-2",
                                                                "type": "button"
                                                            }
                                                        ]
                                                    },
                                                    {
                                                        "type": "tabs",
                                                        "selectedTabIndex": 0,
                                                        "htmlClass": "sub-tabs",
                                                        "tabs": [
                                                            {
                                                                "title": "Dashboard",
                                                                "items": [
                                                                    {
                                                                        "type": "section",
                                                                        "htmlClass": "row",
                                                                        "items": [
                                                                            {
                                                                                "type": "section",
                                                                                "htmlClass": "",
                                                                                "items": [
                                                                                    {
                                                                                        "type": "section",
                                                                                        "htmlClass": "col-xs-12 col-sm-6",
                                                                                        "items": [
                                                                                            {
                                                                                                "key": "style.dashboard.background-type",
                                                                                                "type": "strapselect",
                                                                                                "titleMap": [
                                                                                                    {
                                                                                                        "value": "solid",
                                                                                                        "name": "Solid"
                                                                                                    },
                                                                                                    {
                                                                                                        "value": "gradient",
                                                                                                        "name": "Gradient"
                                                                                                    },
                                                                                                    {
                                                                                                        "value": "image",
                                                                                                        "name": "Image"
                                                                                                    }
                                                                                                ]
                                                                                            }
                                                                                        ]
                                                                                    },
                                                                                    {
                                                                                        "type": "section",
                                                                                        "htmlClass": "col-xs-12 col-sm-6",
                                                                                        "condition": "model.style['dashboard'] ['background-type'] === 'solid'",
                                                                                        "items": [
                                                                                            {
                                                                                                "key": "style.dashboard.background-color",
                                                                                                "colorFormat": "hex3",
                                                                                                "spectrumOptions": {
                                                                                                    "showInput": true,
                                                                                                    "showAlpha": true,
                                                                                                    "allowEmpty": true,
                                                                                                    "showPalette": true,
                                                                                                    "preferredFormat": "hex3",
                                                                                                    "palette": [
                                                                                                        [
                                                                                                            "#ff",
                                                                                                            "##f2f2f2",
                                                                                                            "#2c343a"
                                                                                                        ],
                                                                                                        [
                                                                                                            "#000"
                                                                                                        ]
                                                                                                    ]
                                                                                                }
                                                                                            }
                                                                                        ]
                                                                                    },
                                                                                    {
                                                                                        "type": "section",
                                                                                        "htmlClass": "col-xs-12 col-sm-6",
                                                                                        "condition": "model.style ['dashboard'] ['background-type'] === 'gradient'",
                                                                                        "items": [
                                                                                            {
                                                                                                "key": "style.dashboard.background-gradient"
                                                                                            }
                                                                                        ]
                                                                                    },
                                                                                    {
                                                                                        "type": "section",
                                                                                        "htmlClass": "col-xs-12 col-sm-6",
                                                                                        "condition": "model.style ['dashboard'] ['background-type'] === 'image'",
                                                                                        "items": [
                                                                                            {
                                                                                                "key": "style.dashboard.background-image"
                                                                                            }
                                                                                        ]
                                                                                    }
                                                                                ]
                                                                            }
                                                                        ]
                                                                    },
                                                                    {
                                                                        "type": "section",
                                                                        "htmlClass": "row",
                                                                        "items": [
                                                                            {
                                                                                "type": "section",
                                                                                "htmlClass": "col-xs-12 col-sm-3",
                                                                                "condition": "model.style ['dashboard'] ['background-type'] === 'image'",
                                                                                "items": [
                                                                                    {
                                                                                        "key": "style.dashboard.background-position-x",
                                                                                        "type": "strapselect",
                                                                                        "titleMap": [
                                                                                            {
                                                                                                "value": "left",
                                                                                                "name": "Left"
                                                                                            },
                                                                                            {
                                                                                                "value": "right",
                                                                                                "name": "Right"
                                                                                            },
                                                                                            {
                                                                                                "value": "center",
                                                                                                "name": "Center"
                                                                                            }
                                                                                        ]
                                                                                    }
                                                                                ]
                                                                            },
                                                                            {
                                                                                "type": "section",
                                                                                "htmlClass": "col-xs-12 col-sm-3",
                                                                                "condition": "model.style ['dashboard'] ['background-type'] === 'image'",
                                                                                "items": [
                                                                                    {
                                                                                        "key": "style.dashboard.background-position-y",
                                                                                        "type": "strapselect",
                                                                                        "titleMap": [
                                                                                            {
                                                                                                "value": "top",
                                                                                                "name": "Top"
                                                                                            },
                                                                                            {
                                                                                                "value": "bottom",
                                                                                                "name": "Bottom"
                                                                                            },
                                                                                            {
                                                                                                "value": "center",
                                                                                                "name": "Center"
                                                                                            }
                                                                                        ]
                                                                                    }
                                                                                ]
                                                                            },
                                                                            {
                                                                                "type": "section",
                                                                                "htmlClass": "col-xs-12 col-sm-3",
                                                                                "condition": "model.style ['dashboard'] ['background-type'] === 'image'",
                                                                                "items": [
                                                                                    {
                                                                                        "key": "style.dashboard.background-size",
                                                                                        "type": "strapselect",
                                                                                        "titleMap": [
                                                                                            {
                                                                                                "value": "auto",
                                                                                                "name": "Auto"
                                                                                            },
                                                                                            {
                                                                                                "value": "cover",
                                                                                                "name": "Cover"
                                                                                            },
                                                                                            {
                                                                                                "value": "contain",
                                                                                                "name": "Contain"
                                                                                            }
                                                                                        ]
                                                                                    }
                                                                                ]
                                                                            },
                                                                            {
                                                                                "type": "section",
                                                                                "htmlClass": "col-xs-12 col-sm-3",
                                                                                "condition": "model.style ['dashboard'] ['background-type'] === 'image'",
                                                                                "items": [
                                                                                    {
                                                                                        "key": "style.dashboard.background-repeat",
                                                                                        "type": "strapselect",
                                                                                        "titleMap": [
                                                                                            {
                                                                                                "value": "repeat-x",
                                                                                                "name": "repeat-x"
                                                                                            },
                                                                                            {
                                                                                                "value": "repeat-y",
                                                                                                "name": "repeat-y"
                                                                                            },
                                                                                            {
                                                                                                "value": "repeat",
                                                                                                "name": "repeat"
                                                                                            },
                                                                                            {
                                                                                                "value": "space",
                                                                                                "name": "space"
                                                                                            },
                                                                                            {
                                                                                                "value": "round",
                                                                                                "name": "round"
                                                                                            },
                                                                                            {
                                                                                                "value": "no-repeat",
                                                                                                "name": "no-repeat"
                                                                                            }
                                                                                        ]
                                                                                    }
                                                                                ]
                                                                            }
                                                                        ]
                                                                    },
                                                                    {
                                                                        "type": "section",
                                                                        "htmlClass": "row",
                                                                        "items": [
                                                                            {
                                                                                "type": "section",
                                                                                "htmlClass": "col-xs-12 col-sm-4",
                                                                                "items": [
                                                                                    {
                                                                                        "key": "style.dashboard.border-radius",
                                                                                        "type": "number"
                                                                                    }
                                                                                ]
                                                                            }
                                                                        ]
                                                                    },
                                                                    {
                                                                        "type": "section",
                                                                        "htmlClass": "row",
                                                                        "items": [
                                                                            {
                                                                                "type": "section",
                                                                                "htmlClass": "col-xs-12 col-sm-4",
                                                                                "items": [
                                                                                    {
                                                                                        "key": "style.dashboard.border"
                                                                                    }
                                                                                ]
                                                                            }
                                                                        ]
                                                                    },
                                                                    {
                                                                        "type": "section",
                                                                        "htmlClass": "row",
                                                                        "items": [
                                                                            {
                                                                                "type": "section",
                                                                                "htmlClass": "col-xs-12 col-sm-4",
                                                                                "items": [
                                                                                    {
                                                                                        "key": "style.dashboard.border-width",
                                                                                        "condition": "model.style ['dashboard'] ['border'] === true",
                                                                                        "type": "number"
                                                                                    }
                                                                                ]
                                                                            },
                                                                            {
                                                                                "type": "section",
                                                                                "htmlClass": "col-xs-12 col-sm-4",
                                                                                "items": [
                                                                                    {
                                                                                        "key": "style.dashboard.border-style",
                                                                                        "condition": "model.style ['dashboard'] ['border'] === true",
                                                                                        "type": "strapselect",
                                                                                        "titleMap": [
                                                                                            {
                                                                                                "value": "dotted",
                                                                                                "name": "Dotted"
                                                                                            },
                                                                                            {
                                                                                                "value": "dashed",
                                                                                                "name": "Dashed"
                                                                                            },
                                                                                            {
                                                                                                "value": "solid",
                                                                                                "name": "Solid"
                                                                                            },
                                                                                            {
                                                                                                "value": "double",
                                                                                                "name": "Double"
                                                                                            },
                                                                                            {
                                                                                                "value": "inset",
                                                                                                "name": "Inset"
                                                                                            },
                                                                                            {
                                                                                                "value": "outset",
                                                                                                "name": "Outset"
                                                                                            }
                                                                                        ]
                                                                                    }
                                                                                ]
                                                                            },
                                                                            {
                                                                                "type": "section",
                                                                                "htmlClass": "col-xs-12 col-sm-4",
                                                                                "items": [
                                                                                    {
                                                                                        "key": "style.dashboard.border-color",
                                                                                        "condition": "model.style ['dashboard'] ['border'] === true",
                                                                                        "colorFormat": "hex3",
                                                                                        "spectrumOptions": {
                                                                                            "showInput": true,
                                                                                            "showAlpha": true,
                                                                                            "allowEmpty": true,
                                                                                            "showPalette": true,
                                                                                            "preferredFormat": "hex3",
                                                                                            "palette": [
                                                                                                [
                                                                                                    "#ff",
                                                                                                    "##f2f2f2",
                                                                                                    "#2c343a"
                                                                                                ],
                                                                                                [
                                                                                                    "#000"
                                                                                                ]
                                                                                            ]
                                                                                        }
                                                                                    }
                                                                                ]
                                                                            }
                                                                        ]
                                                                    }
                                                                ]
                                                            },
                                                            {
                                                                "title": "Box",
                                                                "items": [
                                                                    {
                                                                        "type": "section",
                                                                        "htmlClass": "row",
                                                                        "items": [
                                                                            {
                                                                                "type": "section",
                                                                                "htmlClass": "",
                                                                                "items": [
                                                                                    {
                                                                                        "type": "section",
                                                                                        "htmlClass": "col-xs-12 col-sm-6",
                                                                                        "items": [
                                                                                            {
                                                                                                "key": "style.box.background-type",
                                                                                                "type": "strapselect",
                                                                                                "titleMap": [
                                                                                                    {
                                                                                                        "value": "solid",
                                                                                                        "name": "Solid"
                                                                                                    },
                                                                                                    {
                                                                                                        "value": "gradient",
                                                                                                        "name": "Gradient"
                                                                                                    }
                                                                                                ]
                                                                                            }
                                                                                        ]
                                                                                    },
                                                                                    {
                                                                                        "type": "section",
                                                                                        "htmlClass": "col-xs-12 col-sm-6",
                                                                                        "condition": "model.style['box'] ['background-type'] === 'solid'",
                                                                                        "items": [
                                                                                            {
                                                                                                "key": "style.box.background-color",
                                                                                                "colorFormat": "hex3",
                                                                                                "spectrumOptions": {
                                                                                                    "showInput": true,
                                                                                                    "showAlpha": true,
                                                                                                    "allowEmpty": true,
                                                                                                    "showPalette": true,
                                                                                                    "preferredFormat": "hex3",
                                                                                                    "palette": [
                                                                                                        [
                                                                                                            "#ff",
                                                                                                            "##f2f2f2",
                                                                                                            "#2c343a"
                                                                                                        ],
                                                                                                        [
                                                                                                            "#000"
                                                                                                        ]
                                                                                                    ]
                                                                                                }
                                                                                            }
                                                                                        ]
                                                                                    },
                                                                                    {
                                                                                        "type": "section",
                                                                                        "htmlClass": "col-xs-12 col-sm-6",
                                                                                        "condition": "model.style ['box'] ['background-type'] === 'gradient'",
                                                                                        "items": [
                                                                                            {
                                                                                                "key": "style.box.background-gradient"
                                                                                            }
                                                                                        ]
                                                                                    }
                                                                                ]
                                                                            }
                                                                        ]
                                                                    },
                                                                    {
                                                                        "type": "section",
                                                                        "htmlClass": "row",
                                                                        "items": [
                                                                            {
                                                                                "type": "section",
                                                                                "htmlClass": "col-xs-12 col-sm-6",
                                                                                "items": [
                                                                                    {
                                                                                        "key": "style.box.box-shadow",
                                                                                        "type": "strapselect",
                                                                                        "titleMap": [
                                                                                            {
                                                                                                "value": "true",
                                                                                                "name": "Show"
                                                                                            },
                                                                                            {
                                                                                                "value": "false",
                                                                                                "name": "Hide"
                                                                                            }
                                                                                        ]
                                                                                    }
                                                                                ]
                                                                            },
                                                                            {
                                                                                "type": "section",
                                                                                "htmlClass": "col-xs-12 col-sm-6",
                                                                                "condition": "model.style ['box'] ['box-shadow'] === 'true'",
                                                                                "items": [
                                                                                    {
                                                                                        "key": "style.box.box-shadow-color",
                                                                                        "colorFormat": "hex3",
                                                                                        "spectrumOptions": {
                                                                                            "showInput": true,
                                                                                            "showAlpha": true,
                                                                                            "allowEmpty": true,
                                                                                            "showPalette": true,
                                                                                            "preferredFormat": "hex3",
                                                                                            "palette": [
                                                                                                [
                                                                                                    "#ff",
                                                                                                    "##f2f2f2",
                                                                                                    "#2c343a"
                                                                                                ],
                                                                                                [
                                                                                                    "#000"
                                                                                                ]
                                                                                            ]
                                                                                        }
                                                                                    }
                                                                                ]
                                                                            }
                                                                        ]
                                                                    },
                                                                    {
                                                                        "type": "section",
                                                                        "htmlClass": "row",
                                                                        "items": [
                                                                            {
                                                                                "type": "section",
                                                                                "htmlClass": "col-xs-12 col-sm-4",
                                                                                "items": [
                                                                                    {
                                                                                        "key": "style.box.border-radius",
                                                                                        "type": "number"
                                                                                    }
                                                                                ]
                                                                            }
                                                                        ]
                                                                    },
                                                                    {
                                                                        "type": "section",
                                                                        "htmlClass": "row",
                                                                        "items": [
                                                                            {
                                                                                "type": "section",
                                                                                "htmlClass": "col-xs-12",
                                                                                "items": [
                                                                                    "style.box.border"
                                                                                ]
                                                                            }
                                                                        ]
                                                                    },
                                                                    {
                                                                        "type": "section",
                                                                        "htmlClass": "row",
                                                                        "items": [
                                                                            {
                                                                                "type": "section",
                                                                                "htmlClass": "col-xs-12 col-sm-4",
                                                                                "items": [
                                                                                    {
                                                                                        "key": "style.box.border-width",
                                                                                        "condition": "model.style ['box'] ['border'] === true",
                                                                                        "type": "number"
                                                                                    }
                                                                                ]
                                                                            },
                                                                            {
                                                                                "type": "section",
                                                                                "htmlClass": "col-xs-12 col-sm-4",
                                                                                "items": [
                                                                                    {
                                                                                        "key": "style.box.border-style",
                                                                                        "condition": "model.style ['box'] ['border'] === true",
                                                                                        "type": "strapselect",
                                                                                        "titleMap": [
                                                                                            {
                                                                                                "value": "dotted",
                                                                                                "name": "Dotted"
                                                                                            },
                                                                                            {
                                                                                                "value": "dashed",
                                                                                                "name": "Dashed"
                                                                                            },
                                                                                            {
                                                                                                "value": "solid",
                                                                                                "name": "Solid"
                                                                                            },
                                                                                            {
                                                                                                "value": "double",
                                                                                                "name": "Double"
                                                                                            },
                                                                                            {
                                                                                                "value": "inset",
                                                                                                "name": "Inset"
                                                                                            },
                                                                                            {
                                                                                                "value": "outset",
                                                                                                "name": "Outset"
                                                                                            }
                                                                                        ]
                                                                                    }
                                                                                ]
                                                                            },
                                                                            {
                                                                                "type": "section",
                                                                                "htmlClass": "col-xs-12 col-sm-4",
                                                                                "items": [
                                                                                    {
                                                                                        "key": "style.box.border-color",
                                                                                        "condition": "model.style ['box'] ['border'] === true",
                                                                                        "colorFormat": "hex3",
                                                                                        "spectrumOptions": {
                                                                                            "showInput": true,
                                                                                            "showAlpha": true,
                                                                                            "allowEmpty": true,
                                                                                            "showPalette": true,
                                                                                            "preferredFormat": "hex3",
                                                                                            "palette": [
                                                                                                [
                                                                                                    "#ff",
                                                                                                    "##f2f2f2",
                                                                                                    "#2c343a"
                                                                                                ],
                                                                                                [
                                                                                                    "#000"
                                                                                                ]
                                                                                            ]
                                                                                        }
                                                                                    }
                                                                                ]
                                                                            }
                                                                        ]
                                                                    }
                                                                ]
                                                            },
                                                            {
                                                                "title": "Chart Container",
                                                                "items": [
                                                                    {
                                                                        "type": "section",
                                                                        "htmlClass": "row",
                                                                        "items": [
                                                                            {
                                                                                "type": "section",
                                                                                "htmlClass": "",
                                                                                "items": [
                                                                                    {
                                                                                        "type": "section",
                                                                                        "htmlClass": "col-xs-12 col-sm-6",
                                                                                        "items": [
                                                                                            {
                                                                                                "key": "style.box-content.background-type",
                                                                                                "type": "strapselect",
                                                                                                "titleMap": [
                                                                                                    {
                                                                                                        "value": "solid",
                                                                                                        "name": "Solid"
                                                                                                    },
                                                                                                    {
                                                                                                        "value": "gradient",
                                                                                                        "name": "Gradient"
                                                                                                    },
                                                                                                    {
                                                                                                        "value": "transparent",
                                                                                                        "name": "Transparent"
                                                                                                    }
                                                                                                ]
                                                                                            }
                                                                                        ]
                                                                                    },
                                                                                    {
                                                                                        "type": "section",
                                                                                        "htmlClass": "col-xs-12 col-sm-6",
                                                                                        "condition": "model.style ['box-content'] ['background-type'] === 'solid'",
                                                                                        "items": [
                                                                                            {
                                                                                                "key": "style.box-content.background-color",
                                                                                                "colorFormat": "hex3",
                                                                                                "spectrumOptions": {
                                                                                                    "showInput": true,
                                                                                                    "showAlpha": true,
                                                                                                    "allowEmpty": true,
                                                                                                    "showPalette": true,
                                                                                                    "preferredFormat": "hex3",
                                                                                                    "palette": [
                                                                                                        [
                                                                                                            "#ff",
                                                                                                            "##f2f2f2",
                                                                                                            "#2c343a"
                                                                                                        ],
                                                                                                        [
                                                                                                            "#000"
                                                                                                        ]
                                                                                                    ]
                                                                                                }
                                                                                            }
                                                                                        ]
                                                                                    },
                                                                                    {
                                                                                        "type": "section",
                                                                                        "htmlClass": "col-xs-12 col-sm-6",
                                                                                        "condition": "model.style ['box-content'] ['background-type'] === 'gradient'",
                                                                                        "items": [
                                                                                            {
                                                                                                "key": "style.box-content.background-gradient"
                                                                                            }
                                                                                        ]
                                                                                    }
                                                                                ]
                                                                            }
                                                                        ]
                                                                    },
                                                                    {
                                                                        "type": "section",
                                                                        "htmlClass": "row",
                                                                        "items": [
                                                                            {
                                                                                "type": "section",
                                                                                "htmlClass": "col-xs-12 col-sm-4",
                                                                                "items": [
                                                                                    {
                                                                                        "key": "style.box-content.border-radius",
                                                                                        "type": "number"
                                                                                    }
                                                                                ]
                                                                            }
                                                                        ]
                                                                    },
                                                                    {
                                                                        "type": "section",
                                                                        "htmlClass": "row",
                                                                        "items": [
                                                                            {
                                                                                "type": "section",
                                                                                "htmlClass": "col-xs-12",
                                                                                "items": [
                                                                                    "style.box-content.border"
                                                                                ]
                                                                            }
                                                                        ]
                                                                    },
                                                                    {
                                                                        "type": "section",
                                                                        "htmlClass": "row",
                                                                        "items": [
                                                                            {
                                                                                "type": "section",
                                                                                "htmlClass": "col-xs-12 col-sm-4",
                                                                                "items": [
                                                                                    {
                                                                                        "key": "style.box-content.border-width",
                                                                                        "condition": "model.style['box-content'] ['border'] === true",
                                                                                        "type": "number"
                                                                                    }
                                                                                ]
                                                                            },
                                                                            {
                                                                                "type": [
                                                                                    "section",
                                                                                    "strapselect"
                                                                                ],
                                                                                "htmlClass": "col-xs-12 col-sm-4",
                                                                                "key": "style.box-content.border-style",
                                                                                "condition": "model.style['box-content'] ['border'] === true",
                                                                                "titleMap": [
                                                                                    {
                                                                                        "value": "dotted",
                                                                                        "name": "Dotted"
                                                                                    },
                                                                                    {
                                                                                        "value": "dashed",
                                                                                        "name": "Dashed"
                                                                                    },
                                                                                    {
                                                                                        "value": "solid",
                                                                                        "name": "Solid"
                                                                                    },
                                                                                    {
                                                                                        "value": "double",
                                                                                        "name": "Double"
                                                                                    },
                                                                                    {
                                                                                        "value": "inset",
                                                                                        "name": "Inset"
                                                                                    },
                                                                                    {
                                                                                        "value": "outset",
                                                                                        "name": "Outset"
                                                                                    }
                                                                                ]
                                                                            },
                                                                            {
                                                                                "type": "section",
                                                                                "htmlClass": "col-xs-12 col-sm-4",
                                                                                "items": [
                                                                                    {
                                                                                        "key": "style.box-content.border-color",
                                                                                        "condition": "model.style ['box-content'] ['border'] === true",
                                                                                        "colorFormat": "hex3",
                                                                                        "spectrumOptions": {
                                                                                            "showInput": true,
                                                                                            "showAlpha": true,
                                                                                            "allowEmpty": true,
                                                                                            "showPalette": true,
                                                                                            "preferredFormat": "hex3",
                                                                                            "palette": [
                                                                                                [
                                                                                                    "#ff",
                                                                                                    "##f2f2f2",
                                                                                                    "#2c343a"
                                                                                                ],
                                                                                                [
                                                                                                    "#000"
                                                                                                ]
                                                                                            ]
                                                                                        }
                                                                                    }
                                                                                ]
                                                                            }
                                                                        ]
                                                                    }
                                                                ]
                                                            },
                                                            {
                                                                "title": "Header container",
                                                                "items": [
                                                                    {
                                                                        "type": "section",
                                                                        "htmlClass": "row",
                                                                        "items": [
                                                                            {
                                                                                "type": "section",
                                                                                "htmlClass": "col-xs-12 col-sm-3",
                                                                                "items": [
                                                                                    {
                                                                                        "key": "style.box-label.text-align",
                                                                                        "type": "strapselect",
                                                                                        "titleMap": [
                                                                                            {
                                                                                                "value": "left",
                                                                                                "name": "Left"
                                                                                            },
                                                                                            {
                                                                                                "value": "center",
                                                                                                "name": "Center"
                                                                                            },
                                                                                            {
                                                                                                "value": "right",
                                                                                                "name": "Right"
                                                                                            }
                                                                                        ]
                                                                                    }
                                                                                ]
                                                                            },
                                                                            {
                                                                                "type": "section",
                                                                                "htmlClass": "col-xs-12 col-sm-3",
                                                                                "items": [
                                                                                    {
                                                                                        "key": "style.box-label.font-weight",
                                                                                        "type": "strapselect",
                                                                                        "titleMap": [
                                                                                            {
                                                                                                "value": "normal",
                                                                                                "name": "Normal"
                                                                                            },
                                                                                            {
                                                                                                "value": "bold",
                                                                                                "name": "Bold"
                                                                                            }
                                                                                        ]
                                                                                    }
                                                                                ]
                                                                            },
                                                                            {
                                                                                "type": "section",
                                                                                "htmlClass": "col-xs-12 col-sm-3",
                                                                                "items": [
                                                                                    {
                                                                                        "key": "style.box-label.font-size",
                                                                                        "type": "number"
                                                                                    }
                                                                                ]
                                                                            },
                                                                            {
                                                                                "type": "section",
                                                                                "htmlClass": "col-xs-12 col-sm-3",
                                                                                "items": [
                                                                                    {
                                                                                        "key": "style.box-label.color",
                                                                                        "colorFormat": "hex3",
                                                                                        "showInput": true,
                                                                                        "showAlpha": true,
                                                                                        "allowEmpty": true,
                                                                                        "showPalette": true,
                                                                                        "preferredFormat": "hex3",
                                                                                        "palette": [
                                                                                            [
                                                                                                "#ff",
                                                                                                "##f2f2f2",
                                                                                                "#2c343a"
                                                                                            ],
                                                                                            [
                                                                                                "#000"
                                                                                            ]
                                                                                        ]
                                                                                    }
                                                                                ]
                                                                            }
                                                                        ]
                                                                    },
                                                                    {
                                                                        "type": "section",
                                                                        "htmlClass": "row",
                                                                        "items": [
                                                                            {
                                                                                "type": "section",
                                                                                "htmlClass": "",
                                                                                "items": [
                                                                                    {
                                                                                        "type": "section",
                                                                                        "htmlClass": "col-xs-12 col-sm-6",
                                                                                        "items": [
                                                                                            {
                                                                                                "key": "style.box-header.background-type",
                                                                                                "type": "strapselect",
                                                                                                "titleMap": [
                                                                                                    {
                                                                                                        "value": "solid",
                                                                                                        "name": "Solid"
                                                                                                    },
                                                                                                    {
                                                                                                        "value": "gradient",
                                                                                                        "name": "Gradient"
                                                                                                    },
                                                                                                    {
                                                                                                        "value": "transparent",
                                                                                                        "name": "Transparent"
                                                                                                    }
                                                                                                ]
                                                                                            }
                                                                                        ]
                                                                                    },
                                                                                    {
                                                                                        "type": "section",
                                                                                        "htmlClass": "col-xs-12 col-sm-6",
                                                                                        "condition": "model.style ['box-header'] ['background-type'] === 'solid'",
                                                                                        "items": [
                                                                                            {
                                                                                                "key": "style.box-header.background-color",
                                                                                                "colorFormat": "hex3",
                                                                                                "spectrumOptions": {
                                                                                                    "showInput": true,
                                                                                                    "showAlpha": true,
                                                                                                    "allowEmpty": true,
                                                                                                    "showPalette": true,
                                                                                                    "preferredFormat": "hex3",
                                                                                                    "palette": [
                                                                                                        [
                                                                                                            "#ff",
                                                                                                            "##f2f2f2",
                                                                                                            "#2c343a"
                                                                                                        ],
                                                                                                        [
                                                                                                            "#000"
                                                                                                        ]
                                                                                                    ]
                                                                                                }
                                                                                            }
                                                                                        ]
                                                                                    },
                                                                                    {
                                                                                        "type": "section",
                                                                                        "htmlClass": "col-xs-12 col-sm-6",
                                                                                        "condition": "model.style ['box-header'] ['background-type'] === 'gradient'",
                                                                                        "items": [
                                                                                            {
                                                                                                "key": "style.box-header.background-gradient"
                                                                                            }
                                                                                        ]
                                                                                    }
                                                                                ]
                                                                            }
                                                                        ]
                                                                    },
                                                                    {
                                                                        "type": "section",
                                                                        "htmlClass": "row",
                                                                        "items": [
                                                                            {
                                                                                "type": "section",
                                                                                "htmlClass": "col-xs-12 col-sm-4",
                                                                                "items": [
                                                                                    {
                                                                                        "key": "style.box-header.border-radius",
                                                                                        "type": "number"
                                                                                    }
                                                                                ]
                                                                            }
                                                                        ]
                                                                    },
                                                                    {
                                                                        "type": "section",
                                                                        "htmlClass": "row",
                                                                        "items": [
                                                                            {
                                                                                "type": "section",
                                                                                "htmlClass": "col-xs-12",
                                                                                "items": [
                                                                                    {
                                                                                        "key": "style.box-header.border"
                                                                                    }
                                                                                ]
                                                                            }
                                                                        ]
                                                                    },
                                                                    {
                                                                        "type": "section",
                                                                        "htmlClass": "row",
                                                                        "items": [
                                                                            {
                                                                                "type": "section",
                                                                                "htmlClass": "col-xs-12 col-sm-4",
                                                                                "items": [
                                                                                    {
                                                                                        "key": "style.box-header.border-style",
                                                                                        "condition": "model.style ['box-header'] ['border'] === true",
                                                                                        "type": "strapselect",
                                                                                        "titleMap": [
                                                                                            {
                                                                                                "value": "dotted",
                                                                                                "name": "Dotted"
                                                                                            },
                                                                                            {
                                                                                                "value": "dashed",
                                                                                                "name": "Dashed"
                                                                                            },
                                                                                            {
                                                                                                "value": "solid",
                                                                                                "name": "Solid"
                                                                                            },
                                                                                            {
                                                                                                "value": "double",
                                                                                                "name": "Double"
                                                                                            },
                                                                                            {
                                                                                                "value": "inset",
                                                                                                "name": "Inset"
                                                                                            },
                                                                                            {
                                                                                                "value": "outset",
                                                                                                "name": "Outset"
                                                                                            }
                                                                                        ]
                                                                                    }
                                                                                ]
                                                                            },
                                                                            {
                                                                                "type": "section",
                                                                                "htmlClass": "col-xs-12 col-sm-4",
                                                                                "items": [
                                                                                    {
                                                                                        "key": "style.box-header.border-color",
                                                                                        "condition": "model.style ['box-header'] ['border'] === true",
                                                                                        "colorFormat": "hex3",
                                                                                        "spectrumOptions": {
                                                                                            "showInput": true,
                                                                                            "showAlpha": true,
                                                                                            "allowEmpty": true,
                                                                                            "showPalette": true,
                                                                                            "preferredFormat": "hex3",
                                                                                            "palette": [
                                                                                                [
                                                                                                    "#ff",
                                                                                                    "##f2f2f2",
                                                                                                    "#2c343a"
                                                                                                ],
                                                                                                [
                                                                                                    "#000"
                                                                                                ]
                                                                                            ]
                                                                                        }
                                                                                    }
                                                                                ]
                                                                            },
                                                                            {
                                                                                "type": "section",
                                                                                "htmlClass": "col-xs-12 col-sm-4",
                                                                                "items": [
                                                                                    {
                                                                                        "condition": "model.style ['box-header'] ['border'] === true",
                                                                                        "key": "style.box-header.border-width",
                                                                                        "type": "number"
                                                                                    }
                                                                                ]
                                                                            }
                                                                        ]
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "title": "Style",
                                "items": [
                                    {
                                        "type": "section",
                                        "htmlClass": "row",
                                        "items": [
                                            {
                                                "type": "section",
                                                "htmlClass": "col-xs-12",
                                                "items": [
                                                    {
                                                        "key": "inline-style",
                                                        "type": "codemirror",
                                                        "codemirrorOptions": {
                                                            "styleActiveLine": true,
                                                            "lineNumbers": true,
                                                            "lineWrapping": true,
                                                            "autoCloseBrackets": true,
                                                            "matchBrackets": true,
                                                            "theme": "neo",
                                                            "readOnly": false,
                                                            "autoRefresh": true,
                                                            "mode": "css"
                                                        }
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ],
                "schema": {
                    "type": "object",
                    "title": "Schema",
                    "properties": {
                        "publishChannel": {
                            "title": "Publish channel",
                            "type": "string",
                            "description": "Widgets use the publish channel to publish messages that will be distributed to its subscribers."
                        },
                        "subscribeChannel": {
                            "title": "Subscribe channel",
                            "type": "string",
                            "description": "Widgets use the subscribe channel to consume the messages published over that channel as a data source."
                        },
                        "theme": {
                            "title": "Theme",
                            "type": "string",
                            "description": "Select a dashboard theme. By default, light theme is applied.",
                            "default": "light"
                        },
                        "reset": {
                            "title": "Reset",
                            "type": "string",
                            "description": "",
                            "default": ""
                        },
                        "style": {
                            "title": "Style",
                            "type": "object",
                            "properties": {
                                "dashboard": {
                                    "title": "Dashboard",
                                    "type": "object",
                                    "properties": {
                                        "background-type": {
                                            "title": "Background Type",
                                            "type": "string",
                                            "default": "solid"
                                        },
                                        "background-image": {
                                            "title": "Background Image URL",
                                            "type": "string",
                                            "default": ""
                                        },
                                        "background-position-x": {
                                            "title": "Position X",
                                            "type": "string",
                                            "default": "center"
                                        },
                                        "background-position-y": {
                                            "title": "Position Y",
                                            "type": "string",
                                            "default": "center"
                                        },
                                        "background-size": {
                                            "title": "Background size",
                                            "type": "string",
                                            "default": "cover"
                                        },
                                        "background-repeat": {
                                            "title": "Repeat",
                                            "type": "string",
                                            "default": "no-repeat"
                                        },
                                        "background-color": {
                                            "title": "Background Color",
                                            "type": "string",
                                            "format": "color",
                                            "default": "#FFF",
                                            "validationMessage": "Invalid Color"
                                        },
                                        "background-gradient": {
                                            "title": "Background Gradient",
                                            "type": "string",
                                            "default": "linear-gradient(45deg, rgba(255,255,255,1) 49%, rgba(192,192,192,1) 100%, rgba(128,128,128,1) 100%);"
                                        },
                                        "border": {
                                            "title": "Show Border",
                                            "type": "boolean",
                                            "default": false
                                        },
                                        "border-color": {
                                            "title": "Border Color",
                                            "type": "string",
                                            "format": "color",
                                            "default": "#DDD"
                                        },
                                        "border-style": {
                                            "title": "Border Style",
                                            "type": "string",
                                            "default": "solid"
                                        },
                                        "border-width": {
                                            "title": "Border width",
                                            "type": "number",
                                            "default": 1
                                        },
                                        "border-radius": {
                                            "title": "Border Radius",
                                            "type": "number",
                                            "default": 0
                                        },
                                        "box-shadow": {
                                            "title": "Show Box Shadow",
                                            "type": "string",
                                            "default": "true"
                                        },
                                        "box-shadow-color": {
                                            "title": "Box shadow color",
                                            "type": "string",
                                            "format": "color",
                                            "default": "rgba(51, 51, 51, 0.3)"
                                        }
                                    }
                                },
                                "box": {
                                    "title": "Box",
                                    "type": "object",
                                    "properties": {
                                        "background-type": {
                                            "title": "Background Type",
                                            "type": "string",
                                            "default": "solid"
                                        },
                                        "background-color": {
                                            "title": "Background Color",
                                            "type": "string",
                                            "format": "color",
                                            "default": "#FFF",
                                            "validationMessage": "Invalid Color"
                                        },
                                        "background-gradient": {
                                            "title": "Background Gradient",
                                            "type": "string",
                                            "default": "linear-gradient(45deg, rgba(255,255,255,1) 49%, rgba(192,192,192,1) 100%, rgba(128,128,128,1) 100%);"
                                        },
                                        "border": {
                                            "title": "Show Border",
                                            "type": "boolean",
                                            "default": false
                                        },
                                        "border-color": {
                                            "title": "Border Color",
                                            "type": "string",
                                            "format": "color",
                                            "default": "#DDD"
                                        },
                                        "border-style": {
                                            "title": "Border Style",
                                            "type": "string",
                                            "default": "solid"
                                        },
                                        "border-width": {
                                            "title": "Border width",
                                            "type": "number",
                                            "default": 1
                                        },
                                        "border-radius": {
                                            "title": "Border Radius",
                                            "type": "number",
                                            "default": 0
                                        },
                                        "box-shadow": {
                                            "title": "Show Box Shadow",
                                            "type": "string",
                                            "default": "true"
                                        },
                                        "box-shadow-color": {
                                            "title": "Box shadow color",
                                            "type": "string",
                                            "format": "color",
                                            "default": "rgba(51, 51, 51, 0.3)"
                                        }
                                    }
                                },
                                "box-header": {
                                    "title": "Box",
                                    "type": "object",
                                    "properties": {
                                        "background-type": {
                                            "title": "Background Type",
                                            "type": "string",
                                            "default": "solid"
                                        },
                                        "background-color": {
                                            "title": "Background Color",
                                            "type": "string",
                                            "format": "color",
                                            "default": "#FFF",
                                            "validationMessage": "Invalid Color"
                                        },
                                        "background-gradient": {
                                            "title": "Background Gradient",
                                            "type": "string",
                                            "default": "linear-gradient(45deg, rgba(255,255,255,1) 49%, rgba(192,192,192,1) 100%, rgba(128,128,128,1) 100%);"
                                        },
                                        "border": {
                                            "title": "Show Border",
                                            "type": "boolean",
                                            "default": false
                                        },
                                        "border-color": {
                                            "title": "Border Color",
                                            "type": "string",
                                            "format": "color",
                                            "default": "#DDD"
                                        },
                                        "border-style": {
                                            "title": "Border Style",
                                            "type": "string",
                                            "default": "solid"
                                        },
                                        "border-width": {
                                            "title": "Border width",
                                            "type": "number",
                                            "default": 1
                                        },
                                        "border-radius": {
                                            "title": "Border Radius",
                                            "type": "number",
                                            "default": 0
                                        }
                                    }
                                },
                                "box-content": {
                                    "title": "Box",
                                    "type": "object",
                                    "properties": {
                                        "background-type": {
                                            "title": "Background Type",
                                            "type": "string",
                                            "default": "solid"
                                        },
                                        "background-color": {
                                            "title": "Background Color",
                                            "type": "string",
                                            "format": "color",
                                            "default": "#FFF",
                                            "validationMessage": "Invalid Color"
                                        },
                                        "background-gradient": {
                                            "title": "Background Gradient",
                                            "type": "string",
                                            "default": "linear-gradient(45deg, rgba(255,255,255,1) 49%, rgba(192,192,192,1) 100%, rgba(128,128,128,1) 100%);"
                                        },
                                        "border": {
                                            "title": "Show Border",
                                            "type": "boolean",
                                            "default": false
                                        },
                                        "border-color": {
                                            "title": "Border Color",
                                            "type": "string",
                                            "format": "color",
                                            "default": "#DDD"
                                        },
                                        "border-style": {
                                            "title": "Border Style",
                                            "type": "string",
                                            "default": "solid"
                                        },
                                        "border-width": {
                                            "title": "Border width (px)",
                                            "type": "number",
                                            "default": 1
                                        },
                                        "border-radius": {
                                            "title": "Border Radius (px)",
                                            "type": "number",
                                            "default": 0
                                        }
                                    }
                                },
                                "box-label": {
                                    "title": "Box",
                                    "type": "object",
                                    "properties": {
                                        "font-weight": {
                                            "title": "Font weight",
                                            "type": "string",
                                            "default": "normal"
                                        },
                                        "font-size": {
                                            "title": "Font size",
                                            "type": "number",
                                            "default": 19
                                        },
                                        "text-align": {
                                            "title": "Text Align",
                                            "type": "string",
                                            "default": "center"
                                        },
                                        "display": {
                                            "title": "Display",
                                            "type": "string",
                                            "default": "block"
                                        },
                                        "color": {
                                            "title": "Color",
                                            "type": "string",
                                            "format": "color",
                                            "default": "#000",
                                            "validationMessage": "Invalid Color"
                                        }
                                    }
                                }
                            }
                        },
                        "inline-style": {
                            "title": "Define your own style",
                            "type": "string",
                            "description": "ex: .dashboardTheme .dashboardContainer {background-color: red;}"
                        }
                    },
                    "required": [
                        "publishChannel",
                        "subscribeChannel"
                    ]
                }
            }
        }
    })());

angular
  .module('DashboardBuilder')
  .component(
  'dashboardsList',
  {
    bindings : {
      dashboard: "<"
    },
    templateUrl: '/UIComponents/dashboardBuilder/javascript/components/dashboardsList.html',
    controller: ['$scope', '$timeout', '$sce', '$window', 'httpClient', 'wsClient', '$cookies', '$uibModal', 'scriptrService', '$route', '$routeParams', '$q', '_', function($scope, $timeout, $sce, $window, httpClient, wsClient, $cookies,  $uibModal, scriptrService, $route, $routeParams, $q, _) {
      
      this.wsClient = wsClient;
      var self = this;
      self.acls;  
            
      this.$onInit = function() {
        self.loading = true;  
        self.showPanelMsg = false;  
          
        self.users = [{
          code : "anonymous",
          icon : "fa fa-group"    
        }];
          
        this.urlParams = [];
        this.transport = {}//angular.copy(config.transport);
        this.frmGlobalOptions = {
          "destroyStrategy" : "remove",
          "formDefaults": {"feedback": true}
        }
        
        var scriptName = $routeParams.scriptName;
        if(scriptName) {
          this.openEditor(scriptName);
        }
      }  
      
      this.$postLink = function() {
        scriptrService.loadDashboards({}).then(
          function(data, response) {
            if(data && data.documents){
              self.customDashboards = data.documents;
              self.loading = false;
              if(data.documents.length == 0){
                  self.noDashboards = true;
              }  
            }else{
              console.log("No dashboard found.");
              self.loading = false;  
            }
          },
          function(err) {
            self.loading = false;    
            console
              .log(
              "reject published promise",
              err);
          });    
      }

      this.deleteDashboardConfirmation = function(path, name){
        var modalInstance = $uibModal.open({
               controller: 'PopupCont',
               templateUrl: '/UIComponents/dashboardBuilder/javascript/components/deletePopup.html',
               resolve: {
                   dashboard: function () {
                       return self;
                   },
                   path: function () {
                       return path;
                   },
                   name: function () {
                       return name;
                   }
               }
           });  
      }
      
      this.deleteDashboard = function(path){
        var params = {
          "path" : path,
          "name" : name
        }

        self = this;
       
         scriptrService.deleteDashboard(params).then(
          function(data, response) {
            console.log("Delete success.");
            if(data && data.documents){
                self.customDashboards = data.documents;
                if(data.documents.length == 0){
                    self.noDashboards = true;
                }else{
                    self.noDashboards = false;
                } 
           	     self.showMsg("success", "The dashboard has been deleted successfully.");
            }else{
                if(data && data.errorDetail){
                    self.showMsg("danger", data.errorDetail);
                }else{
                    self.showMsg("danger", "An error has occured");
                }
            }
          },
          function(err) {
            self.showMsg("danger", "An error has occured");
            console
              .log(
              "reject published promise",
              err);
          });
      }
      
      

      this.renameDashboard = function(scriptName, newScriptName){
          
          var d = $q.defer();
         console.log(scriptName, newScriptName)
         if(scriptName != newScriptName) {
            var params = {
              "scriptName" : scriptName,
              "newScriptName" : newScriptName
            }
            var self = this;
             console.log(params)
            scriptrService.renameDashboard
              (params)
              .then(
              function(data, response) {
                if(data && data.documents){
                    self.customDashboards = data.documents;
                    if(data.documents.length == 0){
                        self.noDashboards = true;
                    }else{
                        self.noDashboards = false;
                    } 
                    d.resolve();
                     self.showMsg("success", "The dashboard has been renamed successfully.");
                }else{
                    d.reject()
                    if(data && data.errorDetail){
                        self.showMsg("danger", data.errorDetail);
                    }else{
                        self.showMsg("danger", "An error has occured");
                    }
                }
              },
              function(err) {
                  d.reject()
                self.showMsg("danger", err.data.response.metadata.errorDetail);
                console
                  .log(
                  "reject published promise",
                  err);
              });
             
              return d.promise;
         }
          
      }
      
      this.closeAlert = function() {
         this.show = false;
      };
      
      this.showAlert = function(type, content) {
         this.closeAlert();
         this.message = {
           "type": type,
           "content": content
         }
         this.show = true
      }
      
      this.closeMsg = function() {
          this.showPanelMsg = false;
      };

      this.showMsg = function(type, content) {
          this.closeMsg(); 
          this.message = {
              "type": type,
              "content": content
          }
          this.showPanelMsg = true;
      }
       
      this.openEditor = function(scriptName){
        this.model = {"scriptName": scriptName};
        var self = this;
        scriptrService.getScript(this.model).then(
          function(data, response) {
            self.postLoadScript(scriptName, data);
          }, function(err) {
            console.error("reject", err);
          });
      }
}]});


// Please note that the close and dismiss bindings are from $uibModalInstance.
angular.module('DashboardBuilder').controller('PopupCont', ['$scope','$uibModalInstance',function ($scope, $uibModalInstance) {
    $scope.name =  $scope.$resolve.name;
    $scope.close = function () {
        $uibModalInstance.dismiss('cancel');
    };
    $scope.ondeleteDashboard = function () {
        this.$resolve.dashboard.deleteDashboard(this.$resolve.path);
        $uibModalInstance.dismiss('cancel'); 
    };            
}]);


angular.module('DashboardBuilder').service(
  "scriptrService",
  ['httpClient', '$cookies', function(httpClient, $cookies) {
    this.saveScript = function(data, api) {
        return httpClient.post("UIComponents/dashboardBuilder/backend/api/saveDashboard", data)
    }
    
    this.getScript = function(data) {
      return httpClient.post(
        "UIComponents/dashboardBuilder/backend/api/getDashboard", data)
    }
    
    this.loadDashboards = function(data) {
        return httpClient.get(
            "UIComponents/dashboardBuilder/backend/api/loadScripts", {});
    }
    
    this.deleteDashboard = function(data) {
         return httpClient
          .get("UIComponents/dashboardBuilder/backend/api/deleteDashboard", data)
    }
    
     this.renameDashboard = function(data) {
         return httpClient
          .get("UIComponents/dashboardBuilder/backend/api/renameDashboard", data)
    }
    
    this.getToken = function(){
       return $cookies.get("token") || null;
    }
}]);

angular
  .module('DashboardBuilder')
  .component(
  'dashboard',
  {
    bindings : {
      widgets: "<",
      dashboard: "<",
      treeSearchCriteria: "@",
      iconExpand: "@",
      iconCollapse: "@",
      loadTree: "<?",
      showTree: "<",
      devicesModel: "@"
    },
    templateUrl: '/UIComponents/dashboardBuilder/javascript/components/dashboard.html',
    controller: ['$scope', '$rootScope', '$timeout', '$interval', '$sce', '$window', 'httpClient', 'wsClient', '$cookies', 'common', 'commonAction', 'widgetsConfig', 'widgetsDocs', '$uibModal', 'scriptrService', '$route', '$routeParams', '$q', '_', 'boxStyle', 'dashboardConfig', 'dataService', function($scope, $rootScope, $timeout, $interval, $sce, $window, httpClient, wsClient, $cookies, common, commonAction, widgetsConfig, widgetsDocs, $uibModal, scriptrService, $route, $routeParams, $q, _, boxStyle, dashboardConfig, dataService) {
        
        $rootScope.isMobileDevice= function(){
            return (typeof window.orientation !== "undefined") || (navigator.userAgent.indexOf('IEMobile') !== -1);
        }
      
      this.wsClient = wsClient;
      var self = this;
      self.acls;  
      self.counter = 0;  
            
      this.$onInit = function() {
        self.showTree = (typeof this.showTree != 'undefined')? this.showTree : true,  
        self.loading = true;  
        self.showPanelMsg = false;  
          
        self.users = [{
          code : "anonymous",
          icon : "fa fa-group"    
        }];
          
        self.onACLChange = function(acls){
            self.acls = acls.join(";");
            var d = $q.defer(); 
            self.saveScript(null, null, true).then(
              function(data, response) {
                  console.log("success");
                  d.resolve(data, response);
              },
              function(err) {
                console.log("reject", err);
                d.reject(err);  
              });
             return d.promise; 
              
        }  
        
        this.urlParams = [];
        this.dashboardSettings = angular.copy(dashboardConfig.settings);
        this.frmGlobalOptions = {
          "destroyStrategy" : "remove",
          "formDefaults": {"feedback": true}
        }
        
        this.initializeDashboard();
        
        this.schema =  angular.copy(dashboardConfig.script.schema)
        this.form =   angular.copy(dashboardConfig.script.form)
        this.model = {}
        
        this.isInIde =  ($routeParams.scriptrIdeRef) ? true :  false;
        
        var scriptName = $routeParams.scriptName;
        if(scriptName) {
          this.openEditor(scriptName);
        } 
        
        this.slickConfig = {
            enabled: true,
            autoplay: true,
            draggable: false,
            autoplaySpeed: 3000,
            method: {},
            event: {
                beforeChange: function (event, slick, currentSlide, nextSlide) {
                },
                afterChange: function (event, slick, currentSlide, nextSlide) {
                }
            }/**,
          responsive: [
            {
              breakpoint: 1024,
              settings: {
                slidesToShow: 3,
                slidesToScroll: 3,
                infinite: true,
                dots: true
              }
            },
            {
              breakpoint: 600,
              settings: {
                slidesToShow: 2,
                slidesToScroll: 2
              }
            },
            {
              breakpoint: 480,
              settings: {
                slidesToShow: 1,
                slidesToScroll: 1
              }
            }
            // You can unslick at a given breakpoint now by adding:
            // settings: "unslick"
            // instead of a settings object
          ]**/
        };
        
        //Gidster Wall Options
        this.gridsterOptions = {
          defaultSizeY: 50,
          defaultSizeX:50,
          minRows: 1, // the minimum height of the grid, in rows
          maxRows: 100,
          columns: 10, // the width of the grid, in columns
          colWidth: 'auto', // can be an integer or 'auto'.  'auto' uses the pixel width of the element divided by 'columns'
          rowHeight: '50', // can be an integer or 'match'.  Match uses the colWidth, giving you square widgets.
          margins: [10, 10], // the pixel distance between each widget
          defaultSizeX: 2, // the default width of a gridster item, if not specifed
          defaultSizeY: 1, // the default height of a gridster item, if not specified
          mobileBreakPoint:480, // if the screen is not wider that this, remove the grid layout and stack the items
          minColumns: 1, // the minimum columns the grid must have
          //MFE: overriden in each item widget definition
          //minSizeX: 1, // minimum column width of an item
         // maxSizeX: null, // maximum column width of an item
         // minSizeY: 2, // minumum row height of an item
          //maxSizeY: 2, // maximum row height of an item
          sparse: false,
          resizable: {
            enabled: true,
            handle: '.my-class', // optional selector for resize handle
            start: function(event, uiWidget, $element) {
                $(window).trigger('resize');
            	 //$scope.$broadcast("resize_widget", {wdg: uiWidget, element: $element})
            }, // optional callback fired when resize is started,
            resize: function(event, uiWidget, $element) {
                $(window).trigger('resize');
               //console.log("resize event called:",event, uiWidget, $element);
               // $scope.$broadcast("resize_widget", {wdg: uiWidget, element: $element})
            }, // optional callback fired when item is resized,
            stop: function(event, uiWidget, $element) {
              console.log("End resize:",event, uiWidget, $element);
               $timeout( function(){ $(window).trigger('resize')},100);
             // $scope.$broadcast("resize_widget", {wdg: uiWidget, element: $element})
              self.notifyDashboardChange();
            } //optional callback fired when item is finished resizing 
          },
          draggable: {
            enabled: true, // whether dragging items is supported
            handle: '.drag-box',
            start: function(event, uiWidget, $element) {
                //$(window).trigger('resize');
                setTimeout( function(){ $(window).trigger('resize'); window.dispatchEvent(new Event('resize'));},100);
                //$scope.$broadcast("drag_widget", {wdg: uiWidget, element: $element})
            }, // optional callback fired when drag is started,
            drag: function(event, uiWidget, $element) {
               // $(window).trigger('resize');
                setTimeout( function(){ $(window).trigger('resize'); window.dispatchEvent(new Event('resize'));},100);
                //$scope.$broadcast("drag_widget", {wdg: uiWidget, element: $element})
            }, // optional callback fired when item is moved,
            stop: function(event, uiWidget, $element) {
               //console.log("End drag", event, uiWidget, $element);
                //$(window).trigger('resize');
                setTimeout( function(){ $(window).trigger('resize'); window.dispatchEvent(new Event('resize'));},100);
                 self.notifyDashboardChange();
              //$scope.$broadcast("drag_widget", {wdg: uiWidget, element: $element})
            } // optional callback fired when item is finished dragging
          }
        };
          
        $scope.$watch('self.dashboard.widgets', function(items){
   //console.log("one of the items changed")
}, true);
          
        $scope.$on('gridster-resized', function(event, sizes, gridster) { 
      	  //console.log("gridster-resized");
          $(window).trigger('resize');     
        })
        
        $scope.$on('gridster-item-initialized', function(item) { 
      	  //console.log("gridster-item-initialized");
      	  $(window).trigger('resize');
        })
        

        
        this.widgetsConfig = widgetsConfig.widgets; 
        this.widgetsCommon = common;
        this.widgetsCommonAction = commonAction;
        this.dataLoaded = true;
        
      };
      
      //IDE CODE start
      this.$postLink = function() {
        var self = this;
        this.scriptrIdeRef = $routeParams.scriptrIdeRef;
        angular.element($window).on('message', function(event) {
            var msg = event.originalEvent.data;
            if(msg[0] == "get_editor_save_data-"+self.scriptrIdeRef) {
              	if($window.parent) {
                  $window.parent.postMessage([ "editor_save-" + self.scriptrIdeRef, self.getEditorValue()], "*");
                }
           }	
            if(msg[0] == "set_editor_load_data-"+self.scriptrIdeRef) {
              	self.setEditorValue(JSON.parse(msg[1]))
           }	
            		
        });
        
        if($window.parent) {
           $window.parent.postMessage([ "editor_loaded-" + this.scriptrIdeRef ], "*");
         }
      }
      
      this.trustSrc = function(src) {
        return $sce.trustAsResourceUrl(src);
      }
       
      this.openEditor = function(scriptName){
        this.model = {"scriptName": scriptName};
        var self = this;
        scriptrService.getScript(this.model).then(
          function(data, response) {
            self.postLoadScript(scriptName, data);
          }, function(err) {
            console.error("reject", err);
          });
      }
      
      this.initializeDashboard =  function() {
          
          $scope.$on("waiting-for-data", function() {
              self.consumeData(self.data)
          })
          
          this.dashboard = { widgets: [] };
          if(this.widgets) {
            this.dashboard["widgets"] = this.widgets
          }
      };
      
      this.getDocsURL=function(name){
            if(widgetsDocs.widgets[name]){
                return widgetsDocs.widgets[name];
            }
            return widgetsDocs.default;
        }
      
      this.postLoadScript = function(scriptName, data) {
       	 var userConfigRegex = /\/\*#\*SCRIPTR_PLUGIN\*#\*(.*\n?.*)\*#\*#\*\//;
     	 if(data) {
           var userConfig = data.userConfig;
           var matches = userConfig.match(userConfigRegex);
           if(userConfig && matches) {
             var pluginContent = JSON.parse(matches[1]);
             if(pluginContent && pluginContent.metadata &&  pluginContent.metadata.name == "DashboardBuilder"){
                 
               this.widgets = [];
               var widgets = JSON.parse(pluginContent.metadata.plugindata).wdg;
                _.map(widgets, function(wdg, index) {
                  //MFE: backward compatibility for stored dahsboard where gridst. cols were 5 and row was match
                  if(wdg.schema && wdg.form) {
                      wdg.sizeX = wdg.sizeX * 2;
                      wdg.sizeY = wdg.sizeY * 3;
                      wdg.col = wdg.col * 2;
                      wdg.row = wdg.row * 3;
                  }
                    
                  var widgetDefinition =  _.findWhere(self.widgetsConfig, {name: wdg.name});
                   
                  //MFE: Needs to merge with addWidget, we are repeating logic
                  var form = angular.copy(widgetDefinition.form);
                  var schema =  angular.copy(widgetDefinition.schema);
                  var defaults = angular.copy(widgetDefinition.defaults);

                  if(widgetDefinition.commonActionData){
                      form[0].tabs = angular.copy([commonAction.formTab].concat(form[0].tabs));
                      schema.properties =  merge_options(schema.properties,commonAction.schemaFields); 
                  }
                    
                  if(widgetDefinition.commonData){ 
                    
                       
                      form[0].tabs = angular.copy([common.formTab].concat(form[0].tabs));
                      schema.properties =  merge_options(common.schemaFields,schema.properties); 
                  }
                    
                   form[0].tabs = angular.copy((form[0].tabs).concat(boxStyle.formTab));
                   schema.properties = merge_options(schema.properties,boxStyle.schemaFields); 
                   //add docs tab
                   var docTab=angular.copy(common.docTab);
                   docTab.items[1].url=self.getDocsURL(wdg.name);
                   form[0].tabs = angular.copy(form[0].tabs.concat(docTab));
            	   //end 

                   form[0].selectedTabIndex = 0;
                   
                  wdg.form = angular.copy(form);
                  wdg.schema =  angular.copy(schema);
                  self.isManualAdd = false;
                  self.widgets.push(wdg);
               });  
               
               //this.widgets = JSON.parse(pluginContent.metadata.plugindata).wdg; //This needs fixing
               this.urlParams = JSON.parse(pluginContent.metadata.plugindata).urlParams;
               this.dashboardSettings.defaults = JSON.parse(pluginContent.metadata.plugindata).settings;
                 
               this.initDashboardDataService();
                 
               //Generate & apply the custom style
           	   var compiledCss  = generateCustomStyle(this.dashboardSettings.defaults); 
               applyCustomStyle(compiledCss);
                 
               this.dashboard["widgets"] = this.widgets;
               this.isEdit = true;
               this.savedScript = scriptName;
               this.setACLs(data);  
             } else {
               this.showAlert("danger", "Invalid dashboard script. Pass another script.")
               console.error("Invalid dashboard script. Pass another script.")
             }
           } else {
             this.showAlert("danger", "Invalid dashboard script. Pass another script.")
             console.error("Invalid dashboard script. Pass another script.")
           }
         } else {
           this.showAlert("danger", "Invalid dashboard script. Pass another script.")
           console.error("Invalid dashboard script. Pass another script.");
           return;
         }
       console.debug("resolve get script "+scriptName+ " :", data) 
     }
      
      this.clear = function() {
      	var self = this;
         var modalInstance = $uibModal.open({
              animation: true,
              component: 'confirmationModal',
        		  size: 'md',
           	  scope: $scope,
               resolve: {
                 data: function () {
                   return {"title": "Clear Board", "body": "Are you sure you want to empty your dashboard?"};
                 }
               }
             });
             modalInstance.result.then(function (wdgModel) {
               if(wdgModel) {
                  self.clearWidgets();
               } 
             }, function () {
                console.info('modal-component for clearing dashboard update dismissed at: ' + new Date());
             });
			
	  };
	  
	  this.clearWidgets = function() {
		this.dashboard.widgets = [];
        this.notifyDashboardChange();
	  };
      
      this.logout = function() {
        var authorization  = $.scriptr.authorization({loginPage: login.loginTarget});
		  authorization.logout();
	  };
        

      this.addWidget = function(wdg) {
          
          var form = angular.copy(wdg.form);
          var schema =  angular.copy(wdg.schema);
         
          if(wdg.commonActionData){
               form[0].tabs = angular.copy([commonAction.formTab].concat(form[0].tabs));
               schema.properties =  merge_options(schema.properties,commonAction.schemaFields); 
           }
          
           if(wdg.commonData){
             form[0].tabs = angular.copy([common.formTab].concat(form[0].tabs))
             schema.properties =  merge_options(common.schemaFields, schema.properties); 
          }
          
          form[0].tabs = angular.copy((form[0].tabs).concat(boxStyle.formTab));
          schema.properties = merge_options(schema.properties,boxStyle.schemaFields); 
          
          //add docs tab
          var docTab=angular.copy(common.docTab);
          docTab.items[1].url=this.getDocsURL(wdg.name);
          form[0].tabs = angular.copy(form[0].tabs.concat(docTab));
                        
                  //end
          form[0].selectedTabIndex = 0;
  
          var model = angular.copy(wdg.defaults);
          if(self.dashboardSettings.defaults["transport"] != null) {
              model["dashboard-data-handler"] = true;
              model["msg-tag"] = null;
              model["transport"] = null;
              model["api"] = null;
              model["data"] = null;
          }
          
          this.dashboard.widgets.push({
            "name": wdg.name,
            "sizeX": (wdg.box && wdg.box.sizeX) ? wdg.box.sizeX : 2,
            "sizeY": (wdg.box && wdg.box.sizeY) ? wdg.box.sizeY : 2,
            "minSizeX": (wdg.box && wdg.box.minSizeX) ? wdg.box.minSizeX : 2, // minimum column width of an item
            "maxSizeX": (wdg.box && wdg.box.maxSizeX) ? wdg.box.maxSizeX : null, // maximum column width of an item
            "minSizeY": (wdg.box && wdg.box.minSizeY) ? wdg.box.minSizeY : 2, // minumum row height of an item
            "maxSizeY": (wdg.box && wdg.box.maxSizeY) ? wdg.box.maxSizeY : null,
            "fitToWidget": (wdg.box && wdg.box.fitToWidget) ? wdg.box.fitToWidget : null,
            "label": wdg.label,
            "type": wdg.class,
            "options": model,
            "schema": schema,
            "form": form
          });
          this.isManualAdd = true;
          this.notifyDashboardChange();
      };
        
        
      
      
      var applyInlineStyle = function (style) {
          var styleElement = angular.element(document.querySelector('#dashboardInlineStyle'));
		  styleElement[0].innerText = style;
      }
      
      var applyPreviewInlineStyle = function (style) {
          var styleElement = angular.element(document.querySelector('#dashboardPreviewInlineStyle'));
		  styleElement[0].innerText = style;
      }
      
      var cleanPreviewInlineStyle = function () {
          var styleElement = angular.element(document.querySelector('#dashboardPreviewInlineStyle'));
		  styleElement[0].innerText = "";
      }
      
      //We need to add a watch for dashboard settings dataService object
      this.cancelDashboardDataService = function() {
           var msgTag = this.dashboardSettings.defaults["msg-tag"];
           console.log("destory dashboard data service", msgTag, $scope.$id);
            if(msgTag){
               wsClient.unsubscribe(msgTag, null, $scope.$id); 
            }
            
            if(self.refreshDataTimer){
                $interval.cancel( self.refreshTimer );
            }
      } 

    this.data = null;
        
    this.consumeData = function(data, response) {
        self.data = data;
        $scope.$broadcast("update-data", data);
    }
     
    this.$onDestroy = function() {
		self.resetDashboardDataService();
    }
    
    this.resetDashboardDataService = function() {
        console.log("destory dashboard data service props", self.dashboardSettings.defaults["msg-tag"], $scope.$id);
        if(self.dashboardSettings.defaults["msg-tag"]){
            wsClient.unsubscribe(self.dashboardSettings.defaults["msg-tag"], null, $scope.$id); 
        }

        if(self.refreshTimer) {
            $interval.cancel( self.refreshTimer );
        }
     }
     
     this.initDashboardDataService = function() {
        if(self.dashboardSettings.defaults["transport"]) {
            
            var requestInfo = {
                    "api": self.dashboardSettings.defaults["api"],
                    "transport": self.dashboardSettings.defaults["transport"],
                    "msgTag": self.dashboardSettings.defaults["msg-tag"],
                    "apiParams": self.dashboardSettings.defaults["api-params"],
                    "useWindowParams": self.dashboardSettings.defaults["use-window-params"],
                    "httpMethod": self.dashboardSettings.defaults["http-method"],
                    "widgetId": $scope.$id
               };
               dataService.scriptrRequest(requestInfo, self.consumeData.bind(self));
                
              if(self.dashboardSettings.defaults["fetch-data-interval"] != null && self.refreshTimer == null) {
                  //Assuming this is success
                  self.refreshTimer = $interval(
                      function(){
                         self.initDashboardDataService()
                      }, self.dashboardSettings.defaults["fetch-data-interval"]  * 1000);
              }
        }
      }

      
     this.setDashboardSettings = function(redirectTarget) {
        var self = this; 
        var previewTheme  = self.dashboardSettings.defaults.theme;
        var savedTheme = self.dashboardSettings.defaults.theme;
          
        var previewInlineStyle = self.dashboardSettings.defaults["inline-style"];
        var savedInlineStyle = self.dashboardSettings.defaults["inline-style"];
        var form = angular.copy(self.dashboardSettings.form);
        var schema = angular.copy(self.dashboardSettings.schema);
       
      
       
       form[0].tabs = angular.copy([common.formTab].concat(form[0].tabs));
        schema.properties =  merge_options(schema.properties,common.schemaFields); 
         //add docs tab
         var docTab=angular.copy(common.docTab);
         docTab.items[0].url=this.getDocsURL(self.dashboardSettings.name);
         form[0].tabs = angular.copy(form[0].tabs.concat(docTab));
        //end 
            
        var modalInstance = $uibModal.open({
              animation: true,
              component: 'modalComponent',
       		  size: 'md',
              resolve: {
                widget: function () {
                  return {
                    "label":  self.dashboardSettings.label,
                    "options": self.dashboardSettings.defaults,
                    "schema": schema,
                    "form": form,
                    "onFormModelChange": function(modelValue, form, model) {
                        if(form.key.join(".") === "theme") {
                            model.style = angular.copy(__defaultsThemeStyles__[modelValue]);
                        }
                       	var compiledCss  = generateCustomStyle(model); 
               			applyPreviewCustomStyle(compiledCss);
                        if(previewTheme != model.theme) {
                            switchThemeCSS(previewTheme, model.theme)
                            previewTheme = model.theme;
                        }
                        
                        if(model["inline-style"]) {
                            applyPreviewInlineStyle(model["inline-style"]);
                        }
                    }
                  } 
                }
              }
            });

          
            modalInstance.result.then(function (dashboardSettingsModel) {
               
              console.log("modal-component dashboard settings data :", dashboardSettingsModel ,"submitted at: " + new Date());
              if(dashboardSettingsModel != "cancel") {
                if(self.dashboardSettings.defaults && self.dashboardSettings.defaults.publishChannel != dashboardSettingsModel.publishChannel){
                    self.wsClient.updatePublishingChannel(dashboardSettingsModel.publishChannel);
                }
                if(self.dashboardSettings.defaults && self.dashboardSettings.defaults.subscribeChannel != dashboardSettingsModel.subscribeChannel){
                  	self.wsClient.updateSubscriptionChannel(dashboardSettingsModel.subscribeChannel);
                } 
                  
                
                self.dashboardSettings.defaults = angular.copy(dashboardSettingsModel);
                  
               //Generate & apply the custom style
           	   var compiledCss  = generateCustomStyle(dashboardSettingsModel); 
               applyCustomStyle(compiledCss);
                  
                if(dashboardSettingsModel["inline-style"]) {
                     applyInlineStyle(dashboardSettingsModel["inline-style"]);
                }
                  
                self.notifyDashboardChange();
              } else {
                  if(previewTheme != savedTheme)
                		switchThemeCSS(previewTheme, savedTheme);
              }
                
              self.resetDashboardDataService()
              self.initDashboardDataService();
                
              cleanPreviewCustomStyle();
              cleanPreviewInlineStyle();
            }, function () {
              cleanPreviewCustomStyle();
              cleanPreviewInlineStyle();   
              if(previewTheme != savedTheme)
                	switchThemeCSS(previewTheme, savedTheme);
              console.log('modal-component dashboard settings dismissed at: ' + new Date());
            });
      };
        
      var generateCustomStyle = function(settings) {
           var template = document.querySelector('#handlebar-customcss-template').innerText;
           return Handlebars.compile(template)(settings); 
      }
      
      var applyCustomStyle = function (compiledCss) {
          var styleElement = angular.element(document.querySelector('#dashboardCustomStyle'));
		  styleElement[0].innerText = compiledCss;
      }
      
      var applyPreviewCustomStyle = function (compiledCss) {
          var styleElement = angular.element(document.querySelector('#dashboardPreviewCustomStyle'));
		  styleElement[0].innerText = compiledCss;
      }
      
      var cleanPreviewCustomStyle = function () {
          var styleElement = angular.element(document.querySelector('#dashboardPreviewCustomStyle'));
		  styleElement[0].innerText = "";
      }
      
      var switchThemeCSS = function(previousTheme, newTheme) {
            var prevTheme = document.getElementsByTagName("link").namedItem(previousTheme);
            var newTheme = document.getElementsByTagName("link").namedItem(newTheme);
            newTheme.disabled = false;
          	prevTheme.disabled = true;
      }
      
      this.saveDashboard = function(form, custom, aclEvent) {
		console.log("Form submit", form)
        var self = this;
        $scope.$broadcast('schemaFormValidate');

        // Then we check if the form is valid
        if ((form && form.$valid) || aclEvent) {
          var data = {};
           
          var tmp = angular.copy(this.dashboard.widgets);
          data["items"] = _.map(tmp, function(object, index){return _.omit(object, ["form", "schema"] )});
            
          data["urlParams"] = angular.copy(this.urlParams);
          data["token"] = scriptrService.getToken();

          self.dashboardSettings.defaults.redirectTarget = this.model.scriptName;
          console.log("dashboardSettings",self.dashboardSettings);
          data["dashboardSettings"] = angular.copy(this.dashboardSettings.defaults) //MFE: dashboardSettings channels info info needs to be retrieved from url or cookie
          
          //Generate custom Style to pass for the to save template
          data["compiledCss"] = generateCustomStyle(data["dashboardSettings"])
          
          var template = this.unsafe_tags(document.querySelector('#handlebar-template').innerHTML);
          var unescapedHtml = Handlebars.compile(template)(data);
            
          var scriptData = {}
          scriptData["content"] = unescapedHtml;
          scriptData["scriptName"] =  this.model.scriptName;
          scriptData["pluginData"] = JSON.stringify({"wdg": data["items"], "urlParams": data["urlParams"], "settings": data["dashboardSettings"]});
          if(self.isEdit) {
            scriptData["update"] = true;
          }
          if(self.savedScript) {
            scriptData["previousScriptName"]  = self.savedScript;
          }
          //scriptData["custom"] = this.custom; //TODO MFE: Removed, need to check backend
          scriptData["acls"] = this.acls;  
          var d = $q.defer();  
          scriptrService.saveScript(scriptData).then(
            function(data, response) {
               console.log("resolve", data)
               if(data.status == "failure") {
                  self.showAlert("danger", data.errorDetail);
               } else {
                 self.isEdit = true;
                 self.savedScript = scriptData["scriptName"];
                 self.showAlert("success", "The dashboard has been saved successfully.");
                 d.resolve(data, response);  
               }
               
            }, function(err) {
              self.showAlert("danger", err.data.response.metadata.errorDetail);
              console.log("reject", err.data.response.metadata.errorDetail);
              d.reject(err);  
		  });
          return d.promise;   
          //Save data to scriptr
          console.log();        
        }
      }
     
      this.setACLs = function(data){
          this.acls = data.ACL.execute;
          var array = this.acls.split(";");
          this.users = [];  
          for(var i = 0; i < array.length; i++){
              var obj = {};
              obj["code"] = array[i];
              this.users.push(obj);
          }    
      } 
      
     this.selectBranch = function(branch) {
         console.log("Clicked branch data", branch);
        //Get clicked item Name
        var itemLabel = branch.label
        //Check if it has a ui representation
        
        if(branch[itemLabel] && branch[itemLabel].widget && branch[itemLabel].widget.type) {
          var dmWdg = branch[itemLabel].widget;
          var wdg = _.findWhere(widgetsConfig.widgets, {"name": dmWdg.type});
          console.log("Widget is", wdg);
          
          if(!wdg) {
              wdg = _.findWhere(widgetsConfig.widgets, {"name": widgetsConfig.defaultWidget.name});
          }
          
          var form = angular.copy(wdg.form);
          var schema =  angular.copy(wdg.schema);
         
          if(wdg.commonActionData){
               form[0].tabs = angular.copy([commonAction.formTab].concat(form[0].tabs));
               schema.properties =  merge_options(schema.properties,commonAction.schemaFields); 
           }
            
          if(wdg.commonData){
               
            form[0].tabs = angular.copy([common.formTab].concat(form[0].tabs));
              schema.properties = merge_options(common.schemaFields, schema.properties); 
          }  
           
            
            form[0].tabs = angular.copy((form[0].tabs).concat(boxStyle.formTab));
            schema.properties = merge_options(schema.properties,boxStyle.schemaFields); 
            //add docs tab
            var docTab=angular.copy(common.docTab);
                         docTab.items[1].url=this.getDocsURL(wdg.name);
                        form[0].tabs = angular.copy(form[0].tabs.concat(docTab));
                        
                 //end 
            form[0].selectedTabIndex = 0;
            
          var defApiParamsCount = 0;
          if(dmWdg["default-api-params"]){
            defApiParamsCount = Object.keys(dmWdg["default-api-params"]).length;
          }

          var defaults = {};
          _.each(dmWdg, function(value, key) {
            defaults[key] = value;
          });

          //MFE: TO REVIEW BIG TIME
          var apiParamsOutput = "{";
          if(dmWdg["api-params-name"]) {
            _.each(dmWdg["api-params-name"], function(item, index) {
              self.urlParams =  self.urlParams.concat([item]);
              apiParamsOutput += "\""+item+"\": vm."+ item + ((index < dmWdg["api-params-name"].length -1 || defApiParamsCount > 0) ? "," : "");
            });
          }

          if(dmWdg["default-api-params"]) {
            var cnt = 0;
            _.each(dmWdg["default-api-params"], function(value, key) {
              self.urlParams =  self.urlParams.concat([key]);
              apiParamsOutput += "\""+key+"\": \""+ value + ((cnt < defApiParamsCount -1) ? "\"," : "\"");
              cnt++;
            });
            apiParamsOutput +="}";
          } else {
            apiParamsOutput +="}";
          }
          console.log("apiParamsOutput",apiParamsOutput )
          // self.urlParams =  self.urlParams.concat(Object.keys(dmWdg["api-params"]));
          defaults["api-params"] =  apiParamsOutput; 
          //, "msg-tag": dmWdg["msg-tag"]}

          self.dashboard.widgets.push({
            "name":  branch.label,
            "sizeX": (wdg.box && wdg.box.sizeX) ? wdg.box.sizeX : 2,
            "sizeY": (wdg.box && wdg.box.sizeY) ? wdg.box.sizeY : 2,
            "minSizeX": (wdg.box && wdg.box.minSizeX) ? wdg.box.minSizeX : 2, // minimum column width of an item
            "maxSizeX": (wdg.box && wdg.box.maxSizeX) ? wdg.box.maxSizeX : null, // maximum column width of an item
            "minSizeY": (wdg.box && wdg.box.minSizeY) ? wdg.box.minSizeY : 2, // minumum row height of an item
            "maxSizeY": (wdg.box && wdg.box.maxSizeY) ? wdg.box.maxSizeY : null,
            "fitToWidget": (wdg.box && wdg.box.fitToWidget) ? wdg.box.fitToWidget : null,
            "label": wdg.label,
            "type": wdg.class,
            "options": angular.extend(angular.copy(wdg.defaults), angular.copy(defaults)),
            "schema": schema,
            "form": form
          });
          self.notifyDashboardChange();
        } else {
          //self.showAlert("warning", "Device model attribute \""+ itemLabel + "\" has a no widget representation.")
          return;
        };
      }
     this.addCustomDashboard = function(){
        this.showDashboard = true;
        self.savedScript = null;
        this.switchStatus = true;
        this.model.scriptName = null;
        self.isEdit = false;
        this.dashboard.widgets = [];
      }
      this.showCustomDashboard = function(scriptName){
        this.showDashboard = true;
        this.scriptName = scriptName;
        this.switchStatus = false;
        this.dashboardScriptName = "/" + this.scriptName;
        this.openEditor(scriptName);
      }
      this.homeCallback = function(data){
        if(data && data.documents){
          self.customDashboards = data.documents;
          if(data.documents.length == 0){
              self.noDashboards = true;
          }else{
              self.noDashboards = false;
          } 
        }else{
          console.log("No data found");
        }
      }
      this.deleteDashboard = function(path){
        console.log(name, path);
        var params = {
          "path" : path,
          "name" : name
        }

        self = this;
        httpClient
          .get("UIComponents/dashboardBuilder/backend/api/deleteDashboard", params)
          .then(
          function(data, response) {
            console.log("success");
      //      self.showMsg("success", "The dashboard has been deleted successfully.");
          },
          function(err) {
       //     self.showMsg("failure", err.data.response.metadata.errorDetail);   
            console
              .log(
              "reject published promise",
              err);
          });
      }
      
      this.deleteDashboardPopUp = function(path, name){
        var modalInstance = $uibModal.open({
               controller: 'PopupCont',
               templateUrl: '/UIComponents/dashboardBuilder/javascript/components/deletePopup.html',
               resolve: {
                   dashboard: function () {
                       return self;
                   },
                   path: function () {
                       return path;
                   },
                   name: function () {
                       return name;
                   }
               }
           });  
      }

      this.renameDashboard = function(newName, path){
          
         var array = path.split("/");
         var oldName = array[array.length - 1]; 
          
         if(oldName != newName) {
             console.log(name, path);
            var params = {
              "path" : path,
              "newName" : newName
            }
            var self = this;
            httpClient
              .get("UIComponents/dashboardBuilder/backend/api/renameDashboard", params)
              .then(
              function(data, response) {
                if(data == "success"){
                    console.log("success");
                    self.showMsg("success", "The dashboard has been renamed successfully.");
                }else{
                    if(data && data.errorDetail){
                        self.showMsg("danger", data.errorDetail);
                    }else{
                        self.showMsg("danger", "An error has occured");
                    }
                }
              },
              function(err) {
                self.showMsg("danger", err.data.response.metadata.errorDetail);
                console
                  .log(
                  "reject published promise",
                  err);
              });
         }
          
      }
      
      this.viewDasboard = function() {
         if(this.savedScript){
              $window.open("/"+this.savedScript); 
         }else{
             self.showAlert("danger", "Please save your dashboard before viewing it");
         }
      };
      
      this.closeAlert = function() {
         this.show = false;
      };
      
      this.showAlert = function(type, content) {
         this.closeAlert();
         this.message = {
           "type": type,
           "content": content
         }
         this.show = true
      }
      
      this.closeMsg = function() {
          this.showPanelMsg = false;
      };

      this.showMsg = function(type, content) {
          this.closeMsg(); 
          this.message = {
              "type": type,
              "content": content
          }
          this.showPanelMsg = true;
      }
      
      this.getEditorValue = function() {
          var data = {};
          data["items"] = angular.copy(this.dashboard.widgets);
          data["urlParams"] = angular.copy(this.urlParams);
          data["dashboardSettings"] = angular.copy(this.dashboardSettings.defaults);
          data["staticdomain"] = $routeParams.staticdomain;
          var template = this.unsafe_tags(document.querySelector('#handlebar-template').innerHTML);
          var unescapedHtml = Handlebars.compile(template)(data);
          var scriptData = {}
          scriptData["content"] = unescapedHtml;
          scriptData["pluginData"] = JSON.stringify({"wdg": data["items"], "urlParams": data["urlParams"], "settings": data["dashboardSettings"]});
          return scriptData;
      };
        

       this.setEditorValue = function(pluginData) {
         if(pluginData) {
             this.widgets = pluginData.wdg; //This needs fixing
             this.urlParams = pluginData.urlParams;
             this.dashboardSettings.defaults = pluginData.settings;
             this.dashboard["widgets"] = this.widgets;
         }
       }
       
       this.notifyDashboardChange = function() {
         if($window.parent) {
             $window.parent.postMessage([ "editor_data_changed-" + this.scriptrIdeRef , this.getEditorValue()], "*");
           }
       }
      //IDEC CODE end 
       
    /**
         * Overwrites obj1's values with obj2's and adds obj2's if non existent in obj1
         * @param obj1
         * @param obj2
         * @returns obj3 a new object based on obj1 and obj2
         */
       var merge_options = function(obj1,obj2){
           var obj3 = {};
           for (var attrname in obj1) { obj3[attrname] = obj1[attrname]; }
           for (var attrname in obj2) { obj3[attrname] = obj2[attrname]; }
           return obj3;
       }
    this.safe_tags= function(str) {
	    return str.replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;') ;
	};
	
	this.unsafe_tags= function(str) {
		 return str.replace(/&amp;/g, "&").replace(/&lt;/g, "<").replace(/&gt;/g,">").replace(/&quot;/g,"\"")
	};
    }]
  });
angular
  .module('DashboardBuilder').component(
  'box',
  {
    require: {
      parent: '^^dashboard'
    },
    bindings : {
      "widget": "<"
    },
    templateUrl: '/UIComponents/dashboardBuilder/javascript/components/box.html',
    controller: ['$rootScope', '$scope', '$compile', '$element', '$uibModal', function($rootScope,$scope, $compile, $element, $uibModal) {
      
      var boxSelf = this;
        
        boxSelf.isMobile=$rootScope.isMobileDevice();
        
      this.remove = function(widget) {
      	var self = this;
      	
      	var modalInstance = $uibModal.open({
            animation: true,
            component: 'confirmationModal',
      		  size: 'md',
         	  scope: $scope,
             resolve: {
               data: function () {
                 return {"title": "Remove Widget", "body": "Are you sure you want to remove widget from dashboard?"};
               }
             }
           });
           modalInstance.result.then(function (wdgModel) {
             if(wdgModel) {
                self.removeWidget(widget);
             } 
           }, function () {
              console.info('modal-component for removing widget dismissed at: ' + new Date());
           });
      	
      };
      
      this.removeWidget = function(widget) {
        delete this[widget["formatFunction"]];
        this.parent.dashboard.widgets.splice(this.parent.dashboard.widgets.indexOf(widget), 1);
        this.parent.notifyDashboardChange();
      };
      
      this.$onInit =  function() {
         $scope.$on('gridster-item-transition-end', function(item) { 
         	//console.log("gridster-item-transition end");
         //$(window).trigger('resize');
              setTimeout( function(){ $(window).trigger('resize'); window.dispatchEvent(new Event('resize'));},100);
        })
        
        $scope.$on('gridster-item-resized', function(item) {
		 	//console.log("gridster-item-resized");
         	//$(window).trigger('resize');
             setTimeout( function(){ $(window).trigger('resize'); window.dispatchEvent(new Event('resize'));},100);
        })
        var self = this;
        if(this.widget) {
          this.addWidget(this.widget)
        }
        
        $scope.$on("resize_widget", function(event, data) {
          	//console.log("Widget resize", event, data);
          //	$(window).trigger('resize');
             setTimeout( function(){ $(window).trigger('resize'); window.dispatchEvent(new Event('resize'));},100);
            if(self.widget == data.element) {
                if(self.widget.type == "scriptr-grid") {
                    var h = data.wdg.height();
                    data.element.options["grid-height"] = h - 110;
                    self.updateWidget(data.element.options)
                }
            }
            this.boxWidth = $element.width()
            boxSelf.parent.notifyDashboardChange();
        });
        
         $scope.$on("drag_widget", function(event, data) {
		      //console.log("Widget dragged", event, data);
             //$(window).trigger('resize');
              boxSelf.parent.notifyDashboardChange();
        });
        
       /**
        $scope.$on("update_widget", function(event, data) {
          console.log("Widget update", event, data);
          self.updateWidget(event, data)
        })**/
      };
      
      this.openSettings = function() {
        var self = this;
        var modalInstance = $uibModal.open({
              animation: true,
              component: 'modalComponent',
       		  size: 'lg',
          	  scope: $scope,
              resolve: {
                widget: function () {
                  return self.widget;
                }
              }
            });
            modalInstance.result.then(function (wdgModel) {
              if(wdgModel != "cancel") {
                 self.updateWidget(wdgModel)
              } 
            }, function () {
               console.info('modal-component for widget update dismissed at: ' + new Date());
            });
      };
        
      this.addWidget = function(widget) {
        var self = this;
        this.chart = angular.element(document.createElement(widget.type));

        angular.forEach(widget.options, function(value, key) {
         if(angular.isArray(value) || angular.isObject(value)){
             self.chart.attr(key, JSON.stringify(value));
         } else if(key == "on-format-data") {
             if(!this.parent.dashboard.counter){
                this.parent.dashboard.counter = 0; 
             }
             this.parent.dashboard.counter += 1;
             var counter = this.parent.dashboard.counter;
             var functionName = (widget.name+ "FormatData"+counter);
             self[functionName] = new Function('data', 'self', value);
             widget["formatFunction"] = functionName;
             widget["formatFunctionValue"] = value;
          //   delete widget.options["on-format-data"];
             self.chart.attr("on-format-data", ("$ctrl."+functionName))
         } /** MFE: removed for now, need to be implemented differently
           else if(key == "on-action-clicked" || key == "on-clicked") {
             if(!this.parent.dashboard.counter){
                this.parent.dashboard.counter = 0; 
             }
             if(!this.widget.functions) {
                 widget["functions"] = [];
             }
             this.parent.dashboard.counter += 1;
             var counter = this.parent.dashboard.counter;
             var functionName = (widget.name+ (key.replace(/-/g, ''))+counter);
             self[functionName] = new Function('data', value);
             
             widget["functions"].push({"name": functionName, "value": value, "attribute": key});
             self.chart.attr(key, ("vm."+functionName));
         } **/ else {
             self.chart.attr(key, value);
         }
            
           //MFE: maybe these needs to be done differently!
           if(key == "default-info-window") {
             this.parent.dashboard.counter += 1;
             var counter = this.parent.dashboard.counter;
             var infoElement = angular.element(document.createElement("info-window"));
             infoElement.attr("id", value.id);
             infoElement.attr("template", value.template);
             infoElement.attr("max-width", value["max-width"]);
             infoElement.attr("max-height", value["max-height"]);
             self.chart.append(infoElement)
         }
            //MFE: maybe these needs to be done differently!
          if(key == "source-info-window") {
             angular.forEach(value, function(v, k) {
                 var infoElement = angular.element(document.createElement("info-window"));
                 infoElement.attr("id", "infoWindowTemplate_"+v.source);
                 infoElement.attr("template", v.template);
                 infoElement.attr("max-width", v["max-width"]);
                 infoElement.attr("max-height", v["max-height"]);
                 self.chart.append(infoElement)
             });
         }
        }, this);
 
        var el = $compile( this.chart )( $scope );
        var boxContent =  angular.element($element.find(".box-content"));
        boxContent.append(el);
          
         if(self.parent.isManualAdd) {
                    setTimeout(function() {
                        
                        var top_of_element = boxContent.offset().top;
                        var bottom_of_element = boxContent.offset().top + boxContent.outerHeight(true);
                        var bottom_of_screen = $(window).scrollTop() + window.innerHeight;
                        var top_of_screen = $(window).scrollTop();

                        if((bottom_of_screen > top_of_element) && (top_of_screen < bottom_of_element)){
                            // The element is visible, do nothing
                        }
                        else {
                            // The element is not visible, scroll into it
                            $('body').animate({ scrollTop: (boxContent.offset().top + $(boxContent.children()[0]).outerHeight(true)) }, 100);
                 	 }}, 200);
                }
      };
      
      this.updateWidget =  function(/**event, **/wdgModel) {
        var self = this;

        angular.forEach(wdgModel, function(value, key) {
           if(angular.isArray(value) || angular.isObject(value)){
             self.chart.attr(key, JSON.stringify(value));
         } else if(key == "on-format-data") {
             //var functionName = (self.widget.name+ "FormatData");
             self[self.widget["formatFunction"]] = new Function('data', value);
             self[self.widget["formatFunctionValue"]] = value;
             self.chart.attr("on-format-data", ("$ctrl."+self.widget["formatFunction"]))
         }  else {
             self.chart.attr(key, value);
         }
        }, this);
        
        var mdl = angular.copy(wdgModel);
        
        var _current = this.parent.dashboard.widgets.indexOf(this.widget)
        var _new = angular.copy(this.widget);
        _new["options"] = angular.copy(mdl);
        this.parent.dashboard.widgets.splice(_current, 1, _new);
        this.parent.notifyDashboardChange();
      };
    }]
})

// Please note that the close and dismiss bindings are from $uibModalInstance.

angular
  .module('DashboardBuilder')
  .component('modalComponent', 
  {
    bindings: {
      resolve: '<',
      close: '&',
      dismiss: '&'
    },
    templateUrl: '/UIComponents/dashboardBuilder/javascript/components/myModalContent.html',
    controller: ['$scope', function ($scope) {
        
        var self=this;
      this.$onInit = function () {
          
        this.widget = this.resolve.widget;
        
        $scope.$broadcast('schemaFormRedraw')
       
        this.frmGlobalOptions = {
          "destroyStrategy" : "remove",
          "formDefaults": {"feedback": false}
        }

        if(this.widget) {
            if(this.widget.schema) {
              this.schema =  angular.copy(this.widget.schema)
            } 
            if(this.widget.form) {
               this.form =   angular.copy(this.widget.form)
            }
            
            this.model =  (this.widget.options) ?  angular.copy(this.widget.options) : {}
            
            if(this.widget.onFormModelChange) {
                 this.frmGlobalOptions["formDefaults"].onChange = this.widget.onFormModelChange;
            }
              
          }
      };
            this.highlightTabs = function (formName) {
        var rootEl = $('form[name="' + formName + '"]');
        var tabHeaders = rootEl.find('ul li');
        var tabPanes = rootEl.find('.tab-pane') || [];
        rootEl.find('ul li a span.badge').remove();

        for (var i = 0; i < tabPanes.length; i++) {
            var errorCount = $(tabPanes[i]).find('div.ng-invalid').length;
            if (errorCount > 0) {
                $(tabHeaders[i].childNodes[0]).append('<span class="badge sf-badge-error">' + errorCount + '</span>');
            }
        }
    };
    

      this.onSubmit = function(form) {
        // First we broadcast an event so all fields validate themselves
        $scope.$broadcast('schemaFormValidate');
        console.log(this.model);
          
           setTimeout(function() {
          self.highlightTabs(form.$name);
        }, 100);

        // Then we check if the form is valid
        if (form.$valid) {
          //angular.extend(this.widget.options, this.model);
          this.close({$value: this.model});
          //do whatever you need to do with your data.
          //$scope.$emit('update_widget', {"model":  this.model});
          console.log("component_form_parent", this.model)
        } 
      };

      this.onCancel = function (myForm) {
        this.schema = {};
        this.form = {}
        this.model = angular.copy(this.widget.options);
        this.dismiss({$value: 'cancel'});
        console.log("Dissmissed")
      };

    }]
});

angular
  .module('DashboardBuilder')
  .component('sidetoolbar', 
  {
  	bindings: {
    },
    templateUrl: '/UIComponents/dashboardBuilder/javascript/components/sideToolbar.html',
    controller: ['$scope', '$mdSidenav', function ($scope, $mdSidenav) {
      this.close = function () {
        // Component lookup should always be available since we are not using `ng-if`
        $mdSidenav('left').close()
          .then(function () {
            console.debug("close LEFT is done");
          });

      };
    }]
});


angular
  .module('DashboardBuilder')
  .component('confirmationModal', 
  {
    bindings: {
      resolve: '<',
      close: '&',
      dismiss: '&'
    },
    templateUrl: '/UIComponents/dashboardBuilder/javascript/components/confirmation.html',
    controller: ['$scope', function ($scope) {
      this.$onInit = function () {
        this.data = this.resolve.data;
      };

      this.onSubmit = function() {
          this.close({$value: true});
      };
      this.onCancel = function () {
        this.dismiss({$value: false});
      };

    }]
});
   

angular
  .module("SearchBox", [ 'angularBootstrapNavTree' ])
  .component(
  'scriptrSearchbox',
  {
    bindings : {
      
        "treeControl" : "<?",
      
        "treeData" : "<?",
      
        "searchText": "@",
      
        "iconLeaf" : "@",
      
        "paramName" : "@",
      
        "iconExpand" : "@",
      
        "iconCollapse" : "@",
      
        "onSelect" : "<?",
      
        "expandLevel" : "@",
      
        "initialSelection" : "@",
      
        "apiParams" : "<?",
      
        "loadTree" : "<?",
      
        "treeSearchCriteria" : "@",
      
        "transport" : "@",
      
        "api" : "@",
      
        "onFormatData" : "&"
      
    },
    templateUrl: "/UIComponents/dashboard/frontend/components/searchBox/searchBox.html",
    controller: ['wsClient', 'httpClient', function(wsClient, httpClient) {
      
         var self = this;
      
     	 this.iconExpand = (this.iconExpand) ? this.iconExpand : null;
      
      	 this.$onInit = function() {
           
           this.iconLeaf = (this.iconLeaf && this.iconLeaf != "$ctrl.iconLeaf") ? this.iconLeaf : "icon-file  glyphicon glyphicon-file  fa fa-file";
           this.iconExpand = (this.iconExpand && this.iconExpand != "$ctrl.iconExpand") ? this.iconExpand : "icon-plus  glyphicon glyphicon-plus  fa fa-plus";
           this.iconCollapse = (this.iconCollapse && this.iconCollapse != "$ctrl.iconCollapse") ? this.iconCollapse : "icon-minus glyphicon glyphicon-minus fa fa-minus";
           
           this.paramName = (this.paramName) ? this.paramName : "criteria";
           
           this.searchText = (this.searchText) ? this.searchText : "Type to search";
           
           this.treeData = (this.treeData) ? this.treeData : [];
           this.iconLeaf = (this.iconLeaf) ? this.iconLeaf : null;
           this.transport = (this.transport) ? this.transport : "wss";
           
           if(this.loadTree){
             this.searchValue = this.treeSearchCriteria;    
             this.searching = true;
             initDataService(this.transport, this.searchValue);
           }
         }
         
         this.onFilterChanged = function() {
           console.log("submit");
           if(this.searchValue != null && this.searchValue != ""){
                this.searchValue = this.treeSearchCriteria; 
                this.searching = true;
        	   initDataService(this.transport, this.searchValue);
           }
        }
         
        
         
         var initDataService = function(transport, searchValue) {
           var params = {};
           params[self.paramName] = searchValue || self.treeSearchCriteria;
           
           if(self.apiParams){
             for(var param in self.apiParams){
                 params[param] = self.apiParams[param];
             }
           }
           
           if (transport == "wss") {
             wsClient.onReady.then(function() {
               // Subscribe to socket messages with id chart
               wsClient.subscribe(self.msgTag, self.consumeData.bind(self));
               if(self.api) {
                 wsClient.call(self.api, params, self.msgTag)
                   .then(function(data, response) {
                   self.consumeData(data)
                 },
                 function(err) {
                    console.log( "reject published promise", err);
                    self.consumeData();
                  });
               }
             });
           }else {
                if (transport == "https" && self.api) {
                    httpClient
                      .get(self.api, params)
                      .then(
                      function(data, response) {
                        self.consumeData(data)
                      },
                      function(err) {
                        self.consumeData();  
                        console
                          .log(
                          "reject published promise",
                          err);
                      });
                }
              }
         }
         
         this.consumeData = function(data, response) {
           if(typeof self.onFormatData() == "function"){
             data = self.onFormatData()(data);
           }
           console.log("display tree");
           if(typeof data == "object" && data.length > 0){
             this.treeData = data;
             this.noResults = false;
           }else{
             this.treeData = [];
             this.noResults = true;
           }
           this.searching = false;
         }
    }]
});
angular
  .module("List",[ "angucomplete-alt" ])
  .component(
  'scriptrAutocomplete',
  {
      
    bindings : {
        "id": "@",
        
        "objects" : "<?",
        
        "hideObjects": "<?",
        
        "listSelectedObject" : "<?",
        
        "defaultSetObject" : "<?",
      
		"placeholder": "@",	//Placeholder text for the search field.
      
        "maxlength": "@",	//Maxlength attribute for the search field.
      
        "pause": "@",	//The time to wait (in milliseconds) before searching when the user enters new characters.
      
        "selectedObject": "<?",	//Either an object in your scope or callback function. If you set an object, it will be passed to the directive with '=' sign but it is actually one-way-bound data. So, setting it from your scope has no effect on input string. If you set a callback, it gets called when selection is made. To get attributes of the input from which the assignment was made, use this.$parent.$index within your function.
       
        "selectedObjectData": "<?",	//A second parameter which will be passed to selected-object. Only works when using selected-object.
        
        "titleField": "@",	//The name of the field in the JSON objects returned back that should be used for displaying the title in the autocomplete list. Note, if you want to combine fields together, you can comma separate them here (e.g. for a first and last name combined). If you want to access nested field, use dot to connect attributes (e.g. name.first).
        
        "descriptionField": "@",	//The name of the field in the JSON objects returned back that should be used for displaying the description in the autocomplete list.
        
        "imageField": "@",	//The name of the field in the JSON objects returned back that should be used for displaying an image in the autocomplete list. example	No	@	pic
         
        "minlength": "@",	//The minimum length of string required before searching. example. If set to 0, it shows all items. It works both local and remote but is intended to use with local data. If used with remote API, it needs to return all items when query parameter is empty string.	
        
        "inputName": "@",	//Name for input field. This is required when you use field-required.
        
        "inputClass": "@",	//The classes to use for styling the input box.
        
        "matchClass": "@",	//If it is assigned, matching part of title is highlighted with given class style.
        
        "localData": "<?",	//The local data variable to use from your controller. Should be an array of objects.
      
        "searchFields": "@",	//The fields from your local data to search on (comma separate them). Each field can contain dots for accessing nested attribute.
      
        "clearSelected": "@",	//To clear out input field upon selecting an item, set this attribute to true. 
      
        "overrideSuggestions": "@",	//To override suggestions and set the value in input field to selectedObject. 
      
        "fieldRequired": "@",	//Set field to be required. Requirement for this to work is that this directive needs to be in a form and you need to provide input-name. Default class name is "autocomplete-required".
      
        "fieldRequiredClass": "@",	//Set custom class name for required.	
      
        "textSearching": "@",	//Custom string to show when search is in progress. Set this to 'false' prevents text to show up.	
      
        "textNoResults": "@",	//Custom string to show when there is no match. Set this to 'false' prevents text to show up.	
      
        "initialValue": "@",	//Initial value for component. If string, the internal model is set to the string value, if an object, the title-field attribute is used to parse the correct title for the view, and the internal model is set to the object.
        "inputChanged": "&",	//A callback function that is called when input field is changed. To get attributes of the input from which the assignment was made, use this.$parent.$index within your function.
      
        "autoMatch": "@",	//Allows for auto selecting an item if the search text matches a search results attributes exactly.
      
        "focusIn": "&",	//A function or expression to be called when input field gets focused.
      
        "focusOut": "&",	//A function or expression to be called when input field lose focus.
      
        "disableInput": "@",	//A model to control disable/enable of input field.
      
        "focusFirst": "@",	//Automatically select the first match from the result list.
      
        "fieldTabindex": "@",	//Setting the tabindex attribute on the input field.
      
        "parseInput":"&",	//A function or expression to parse input string before comparing into search process.
      
        "localSearch": "&",	//A function that search local data. It should take a input string and an array of items as arguments and returns an array of matched items. 
      
        "transport" : "@",
      
        "msgTag" : "@",
      
        "api" : "@",
      
        "onFormatData" : "&"
      
    },
    templateUrl: "/UIComponents/dashboard/frontend/components/list/autocomplete.html",
    controller: ['$scope', 'wsClient', 'httpClient', function($scope,wsClient, httpClient) {
      
         var self = this;
      
      	 this.$onInit = function() {
           
           this.localData = (this.localData) ? this.localData : [];
           this.fieldRequired = (typeof this.fieldRequired != 'undefined') ? this.fieldRequired : false;
           this.textSearching = (typeof this.textSearching != 'undefined') ? this.textSearching : false;
           
           this.transport = (this.transport) ? this.transport : "wss";
             
           this.objects = (this.objects) ? this.objects : []; 
            
           if(this.listSelectedObject && this.objects.length > 0 && !self.api){
                $scope.$broadcast('angucomplete-alt:setData', self.id, this.localData);
                $scope.$broadcast('angucomplete-alt:setSelectedObjects', self.id, this.objects);
           } 
             
             
           if(self.api){
               self.showList = false;
               initDataService(this.transport);
           }  
         }
         
         self.addObjectToList = function(obj){
             $scope.$broadcast('angucomplete-alt:addObjectToList', self.id, obj);
             if(this.objects.length == 0 && typeof this.defaultSetObject != 'undefined'){
                 this.objects = JSON.parse(JSON.stringify(this.defaultSetObject));
             }
         }
         
         var initDataService = function(transport) {
           if (transport == "wss") {
             wsClient.onReady.then(function() {
               // Subscribe to socket messages with id chart
               wsClient.subscribe(self.msgTag, self.consumeData.bind(self));
               if(self.api) {
                 wsClient.call(self.api, self.apiParams, self.msgTag)
                   .then(function(data, response) {
                   self.consumeData(data)
                 });
               }
             });
           }else {
                if (transport == "https" && self.api) {
                    httpClient
                      .get(self.api, self.apiParams)
                      .then(
                      function(data, response) {
                        self.consumeData(data)
                      },
                      function(err) {
                        console
                          .log(
                          "reject published promise",
                          err);
                      });
                }
              }
         }
         
         this.consumeData = function(data, response) {
           self.showList = true;  
           if(typeof self.onFormatData() == "function"){
             data = self.onFormatData()(data);
           }
           this.localData = data;  
           if(this.listSelectedObject && this.objects.length > 0){
                $scope.$broadcast('angucomplete-alt:setData', self.id, this.localData);
                $scope.$broadcast('angucomplete-alt:setSelectedObjects', self.id, this.objects);
           }  
         }
    }]
});